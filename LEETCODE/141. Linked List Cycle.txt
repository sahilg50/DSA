// https://leetcode.com/problems/linked-list-cycle/description/

// Approach 1: Slow and Fast Pointers
class Solution {
public:
    bool hasCycle(ListNode *head) {

        ListNode *slow = head;
        ListNode *fast = head;
        while(slow != nullptr && fast != nullptr && fast->next != nullptr){
            slow = slow->next;
            fast = fast->next->next;

            if(slow == fast) return true;
        }

        return false;
    }
};
/*
If N = number of nodes in the LinkedList, then:

Time Complexity: O(2 * N)

Space Complexity: O(1)
*/