// https://leetcode.com/problems/candy/description/?envType=daily-question&envId=2025-06-02


// Approach 1: Comparing 1 neighbor at a time
// Solution: https://www.youtube.com/watch?v=IIqVFvKE6RY
class Solution {
public:
    int candy(vector<int>& ratings) {

        int n = ratings.size();
        vector<int> left(n, 1);
        vector<int> right(n, 1);

        for(int ind = 1; ind < ratings.size(); ind++){
            if(ratings[ind] > ratings[ind - 1]) left[ind] = left[ind - 1] + 1;
        }

        for(int ind = n-2; ind >= 0; ind--){
            if(ratings[ind] > ratings[ind + 1]) right[ind] = right[ind + 1] + 1;
        }

        int totalCandies = 0;
        for(int ind = 0; ind < n; ind++) totalCandies += max(left[ind], right[ind]);

        return totalCandies;

    }
};
/*
Let N = size of ratings

Time Complexity:
    - Create left slope: O(N)
    - Create right slope: O(N)
    - Find total candies: O(N)
    => Total: O(3 * N)

Space Complexity:
    - left (1d-vector): O(N)
    - right (1d-vector): O(N)
*/


// Approach 2: Slope concept
// Solution: https://www.youtube.com/watch?v=IIqVFvKE6RY
class Solution {
public:
    int candy(vector<int>& ratings) {

        int n = ratings.size();
        int totalCandies = 1;

        int i = 1;
        while(i < n){
            
            // Flat slope
            if(ratings[i] == ratings[i - 1]){
                totalCandies++;
                i++;
                continue;
            }

            int peak = 1;
            while(i < n && ratings[i] > ratings[i - 1]){
                peak++;
                totalCandies += peak;
                i++;
            }

            int down = 1;
            while(i < n && ratings[i] < ratings[i - 1]){
                totalCandies += down;
                down++;
                i++;
            }

            if(down > peak){
                totalCandies += down - peak;
            }
        }
        return totalCandies;
    }
};
/*
Let N = size of ratings

Time Complexity: O(N)

Space Complexity: O(1)
*/