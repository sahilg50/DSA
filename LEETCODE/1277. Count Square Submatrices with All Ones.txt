// https://leetcode.com/problems/count-square-submatrices-with-all-ones/description/


// Approach 1: DP Table
class Solution {
public:
    int countSquares(vector<vector<int>>& matrix) {
        int m = matrix.size(), n = matrix[0].size();
        vector<vector<int>> dp = matrix;

        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                if(matrix[i][j]==0) dp[i][j] = 0;
                else{
                    dp[i][j] = min(dp[i-1][j-1], min(dp[i-1][j], dp[i][j-1]))+1;
                }
            }
        }
        
        int ans = 0;
        for(auto &row : dp){
            for(auto &col : row) ans += col;
        }
        return ans;
    }
};
/*
If M = rows and N = columns then:
TC-> O(M*N)
SC-> Dp Array: O(M*N)
*/

