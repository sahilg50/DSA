/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        
        if(!root) return nullptr;
        
        if(root->val==key){
            
             //If the key node has no children
            if(root->left==nullptr && root->right==nullptr){
                delete root;
                return nullptr;
            }

            //If the key node has only left child
            else if(root->right==nullptr){
                TreeNode* left = root->left;
                delete root;
                return left;
            }

            //If the key has the right child or both the children.
            else{
                TreeNode* n = root->right;
                while( n->left ) n = n->left;
                swap( n->val , root->val );
                root->right = deleteNode( root->right , key );
                return root;
            }
        }
        
        if( root->val > key )
            root->left = deleteNode( root->left , key );
        
        if( root->val < key )
            root->right = deleteNode( root->right , key );
        
        return root;
    }
};
/*
TC-> O(log(N))
SC-> Recursion Stack:O(log(N))ASC
*/