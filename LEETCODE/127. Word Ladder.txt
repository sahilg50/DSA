// Approach 1: BFS using Queue and Set
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        queue<pair<string, int>> Q;
        Q.push({beginWord, 1});
        unordered_set<string> S(wordList.begin(), wordList.end());

        while(!Q.empty()){
            pair<string, int> element = Q.front();
            string word = element.first;
            int level = element.second;
            Q.pop();

            if(word == endWord) return level;
            for(int i=0; i<word.size(); i++){
                char original = word[i];
                for(char ch='a'; ch<='z'; ch++){
                    word[i] = ch;
                    if(S.find(word)!=S.end()){
                        Q.push({word, level+1});
                        S.erase(word);
                    }
                }
                word[i] = original;
            }
        }

        return 0;
    }
}; 