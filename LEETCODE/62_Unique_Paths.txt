class Solution {
public:
    int uniquePaths(int m, int n) {
        
    // This problem can also be solved using recursion but we are using PnC.
        
        int N = n+m-2; // total steps = n-1 + m-1
        int r = min(n,m) - 1; // will iterate on the minimum for efficiency = (total) C (min(right, down))
        
        double res = 1;
        
		// compute nCr
        for(int i=1; i<=r; ++i, N--){
            
            res = res * (N) / i;
        }
        
        return (int)res;
    }
};
/*
TC-> O(min(n, m))
SC-> O(1), constant
*/
// You could notice that (m-1) + ( n-1) which is (3-1)+(2-1)  i.e.   3. Which is the no. of 
// total step-counts.

// Second thing that you can notice is the no. of right and down movements [steps] in 
// each unique path which also remains constant. i.e.  Two R-movement [step] and one 
// D-movement [step] are available in each path.

// Now, again try to find out a relationship between the no. of R-movement [step] 
// and the no. of D-movement [step] with the given matrix size.

// You could notice that if "m" denotes the right movement [step] direction, then 
// the total no. of right movement [step] is m-1 which is 3-1 i.e. 2. Which are R and  R.

// You could also notice that if "n" denotes the down movement [step] direction, 
// then the total no. of down movement [step] is n-1 which is 2-1 i.e. 1. Which is D.

// So, finally you have reached at a conclusion that there is a relationship between 
// our two observations and matrix size

// First one is total steps counts = 3 [ (m-1)+(n-1) ]

// Total Right movement count in each path = 2 [m-1]
// Total Down movement count in each path = 1 [n-1]

// Now, we can think of having 3 places  to fill with 2 items[2 R] and one place with 
// one item[1 D].

// # # #  [ '# ' dentoees 3 places ]	
// 3C2 * 1C1 

// OR

//  Now, we can think of having 3 places  to fill with 1 item[1 D] and the rest two places with 
// two items [2 R].

// # # #  [ '# ' dentoees 3 places ]		
// 3C1 * 2C2
	
// You can approach either way to calculate the total possible combination which results 
// as 3.  One more thing that you can notice here is that both 1C1 and 2C2 will give you 1 as
// a result. So, we can discard it and we can directly use either 3C2 or 3C1 .

// Now, translate the final result in NcR formula.
// Let N= (m-1) + (n-1)=m+n-2
// Let r= m-1 or n-1
// Calculate NcR in the program and it will be the total no. of nique paths.
