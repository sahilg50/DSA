// https://leetcode.com/problems/flood-fill/description/


// Approach 1: BFS using Queue
class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        int m = image.size();
        int n = image[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));

        queue<pair<int, int>> Q;
        Q.push({sr, sc});
        vis[sr][sc] = 1; 
        int baseColor = image[sr][sc];

        while(!Q.empty()){
            int r = Q.front().first;
            int c = Q.front().second;
            Q.pop();
            image[r][c] = color;

            int deltaR[] = {-1, 0, +1, 0};
            int deltaC[] = {0, -1, 0, +1};
            for(int i=0; i<4; i++){
                int row = r + deltaR[i];
                int col = c + deltaC[i];
                if(row>=0 && row<m && col>=0 && col<n && image[row][col]==baseColor && !vis[row][col]){
                    Q.push({row, col});
                    vis[row][col] = 1;
                }
            }
        }

        return image;
    }
};
/*
If M = rows, and N = columns, then:
TC -> O(4*M*N)
SC -> Vis Array: O(M*N) + Queue: O(M*N)
*/


// Approach 2: DFS using Recursion
class Solution {
private:
    void dfs(int r, int c, int m, int n, int color, int baseColor, vector<vector<int>> &image, vector<vector<int>> &vis){
        vis[r][c] = 1;
        image[r][c] = color;

        int deltaR[] = {-1, 0, +1, 0};
        int deltaC[] = {0, -1, 0, +1};
        for(int i=0; i<4; i++){
            int row = r + deltaR[i];
            int col = c + deltaC[i];
            if(row>=0 && row<m && col>=0 && col<n && image[row][col]==baseColor && !vis[row][col]){
                dfs(row, col, m, n, color, baseColor, image, vis);
            }
        }
    }
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        int m = image.size();
        int n = image[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));

        int baseColor = image[sr][sc];
        dfs(sr, sc, m, n, color, baseColor, image, vis);

        return image;
    }
};
/*
If M = rows, and N = columns, then:
TC -> O(4*M*N)
SC -> Vis Array: O(M*N) + Recursion Stack: O(M+N)ASC
*/