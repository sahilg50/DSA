/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int, map<int, multiset<int>>> M;
        
        queue<pair<TreeNode*, pair<int,int>>> Q;
        Q.push({root,{ 0, 0}}); // {Node, vertical, level}
        
        // level order traversal
        while(!Q.empty()){
            auto temp = Q.front();
            Q.pop();
            TreeNode *node = temp.first;
            int v = temp.second.first;
            int l = temp.second.second;
            M[v][l].insert(node->val);
            if(node->left!=nullptr) Q.push({node->left, {v-1, l+1}});
            if(node->right!=nullptr) Q.push({node->right, {v+1, l+1}});
        }
        
        vector<vector<int>> ans;
        for(auto &v:M){
            vector<int> col;
            for(auto &l:v.second){
                for(auto &node:l.second){
                    col.push_back(node);
                }
            }
            ans.push_back(col);
        }
        
        return ans;
    }
};
/*
TC-> O(N)
SC-> Queue:O(N) + Map:O(N), N is the number of nodes in the binary tree.
*/