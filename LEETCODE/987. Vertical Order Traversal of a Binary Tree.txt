//https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/


// Approach 1: Optimal (Level Order Traversal) (Queue + Map + MultiSet)
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode *root) {
        
        queue<pair<TreeNode *, pair<int, int>>> Q;
        if(root) Q.push({root, {0, 0}}); // {root, {X, Y}}

        map<int, map<int, multiset<int>>> M;

        while(!Q.empty()){

            auto temp = Q.front(); Q.pop();
            TreeNode *node = temp.first;
            int x = temp.second.first, y = temp.second.second;

            M[x][y].insert(node->val);

            if(node->left) Q.push({node->left, {x-1, y+1}});
            if(node->right) Q.push({node->right, {x+1, y+1}});
        }

        vector<vector<int>> ans;
        for(auto col : M){
            vector<int> temp;
            for(auto row : col.second){
                for(int num : row.second){
                    temp.push_back(num);
                }
            }
            ans.push_back(temp);
        }

        return ans;
    }
};
/*
If N = size of array, then:
TC-> Level Order Traversal: O(N) + Process Map: O(N)
SC-> Queue: O(N) + Map: O(N*3) + Temp Array: O(N) + Ans Array: O(N)ASC
*/