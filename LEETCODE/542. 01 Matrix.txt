// https://leetcode.com/problems/01-matrix/description/

// Approach 1: Multi-Source BFS using Queue
class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {

        int m = mat.size(), n = mat[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));
        vector<vector<int>> dis(m, vector<int>(n, 0));
    
        queue<pair<pair<int, int>, int>> Q;

        for(int r=0; r<m; r++){
            for(int c=0; c<n; c++){
                if(mat[r][c]==0){
                    Q.push({{r, c}, 0});
                    vis[r][c] = 1;
                }
            }
        }

        int delRow[] = {-1, 0, +1, 0};
        int delCol[] = {0, -1, 0, +1};

        while(!Q.empty()){
            int row = Q.front().first.first;
            int col = Q.front().first.second;
            int distance = Q.front().second;
            Q.pop();
            dis[row][col] = distance;

            for(int i=0; i<4; i++){
                int r = row + delRow[i];
                int c = col + delCol[i];
                if(r>=0 && r<m && c>=0 && c<n && !vis[r][c]){
                    vis[r][c] = 1;
                    Q.push({{r, c}, distance+1});
                }
            }
        }
        return dis;
    }
};
/*
If M = rows and N = cols, then:
TC-> O(M*N)
SC-> Vis Array: O(M*N) + Queue: O(M*N) + Dis Array: O(M*N)
*/