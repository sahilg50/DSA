// https://leetcode.com/problems/valid-sudoku/description/


// Approach 1: Bit Masking
// We've to check if the set numbers are violating the rules of the sudoku. If not, then sudoku is solvable.
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int rows[9] = {0}, columns[9] = {0}, boxes[9] = {0};
        
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                if (board[i][j] == '.') continue;
                
                int num = board[i][j] - '1'; // Convert '1'-'9' to 0-8
                int mask = 1 << num;         // Create bit-mask for the number
                int boxIndex = (i / 3) * 3 + j / 3;
                
                // Check if the number is already set in the row, column, or box
                if (rows[i] & mask || columns[j] & mask || boxes[boxIndex] & mask) {
                    return false;
                }
                
                // Mark the number in the row, column, and box
                rows[i] |= mask;
                columns[j] |= mask;
                boxes[boxIndex] |= mask;
            }
        }
        return true;
    }
};
/*
TC-> O(1)
SC-> O(1)
*/

