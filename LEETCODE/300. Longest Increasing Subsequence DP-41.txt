// https://leetcode.com/problems/longest-increasing-subsequence/

// 1. Recursion + Memoization
class Solution {
private:
    int util(int ind, int prevInd, vector<int> &nums, vector<vector<int>> &dp){
        if(ind==nums.size()) return 0;

        if(dp[ind][prevInd+1]!=-1) return dp[ind][prevInd+1];

        int pick=0, notPick=0;
        // check if pick is possible
        if(prevInd==-1 || nums[ind]>nums[prevInd]) pick = 1 + util(ind+1, ind, nums, dp);
        notPick = util(ind+1, prevInd, nums, dp);

        return dp[ind][prevInd+1] = max(pick, notPick);
        // We're storing the second state in +1 state because prevInd can also be -1.
    }
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> dp(n+1, vector<int>(n+1, -1));
        return util(0, -1, nums, dp);
    }
};
/*
If N is the size of the array nums then: 
1. Recursion
    TC-> O(2^N)
    SC-> Recursion Stack: O(N)ASC

2. Recursion + Memoization
    TC-> O(N*N)
    SC-> DP Array: O(N*N) + Recursion Stack: O(N)ASC
    // Note: The dimension of dp array depends upon the number of indexes and states
*/

// Approach 2: Tabulation (Top Down) (Recursion converted to Tabulation)
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));
        for(int ind=n-1; ind>=0; ind--){
            for(int prevInd=ind-1; prevInd>=-1; prevInd--){
                int pick=0, notPick=0;
                notPick = dp[ind+1][prevInd+1];
                if(prevInd==-1 || nums[ind]>nums[prevInd]) pick = 1 + dp[ind+1][ind+1];
                dp[ind][prevInd+1] = max(pick, notPick);
            }
        }
        return dp[0][0];
    }
};
/*
TC-> O(N^2)
SC-> DP Array: O(N^2)
*/

// Approach 3: algorithmic (Bottom Up)
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {

        int n = nums.size(), LIS = 1;
        vector<int> dp(n,1);
        for(int i=0; i<n; i++){
            for(int j=0; j<i; j++){
                if(nums[i]>nums[j]){
                    dp[i] = max(dp[i], dp[j]+1);
                    LIS = max(LIS, dp[i]);
                }
            }
        }
        return LIS;
    }
};
/*
TC-> O(N^2)
SC-> O(N)
*/