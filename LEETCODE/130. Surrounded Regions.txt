// https://leetcode.com/problems/surrounded-regions/description/


// Approach 1: Multi-Source BFS using Queue + Visited Array
class Solution {
public:
    void solve(vector<vector<char>>& board) {
        int m = board.size();
        int n = board[0].size();

        queue<pair<int, int>> Q;
        vector<vector<int>> vis(m, vector<int>(n, 0));

        for(int r=0; r<m; r++){
            for(int c=0; c<n; c++){
                if(board[r][c]=='O' && (r==0 || r==m-1 || c==0 || c==n-1)){
                    Q.push({r, c});
                    vis[r][c] = 1;
                }
            }
        }

        while(!Q.empty()){
            pair<int, int> pos = Q.front();
            int row = pos.first;
            int col = pos.second;
            Q.pop();

            int deltaR[] = {-1, 0, +1, 0};
            int deltaC[] = {0, -1, 0, +1};
            for(int i=0; i<4; i++){
                int r = row + deltaR[i];
                int c = col + deltaC[i];
                if(r>=0 && r<m && c>=0 && c<n && board[r][c]=='O' && !vis[r][c]){
                    Q.push({r, c});
                    vis[r][c] = 1;
                }
            }
        }

        for(int r=0; r<m; r++){
            for(int c=0; c<n; c++){
                if(vis[r][c]) board[r][c] = 'O';
                else board[r][c] = 'X';
            }
        }
    }
};
/*
If M = number of rows, N = number of columns, then:
TC-> O(4*M*N)
SC-> Vis Array: O(M*N) + Queue: O(M*N) 
*/


// Approach 2: DFS using Recursion + Visited Array
class Solution {
private:
    void dfs(int row, int col, int m, int n, vector<vector<char>>& board, vector<vector<int>> &vis){
        vis[row][col] = 1;

        int deltaR[] = {-1, 0, +1, 0};
        int deltaC[] = {0, -1, 0, +1};
        for(int i=0; i<4; i++){
            int r = row + deltaR[i];
            int c = col + deltaC[i];
            if(r>=0 && r<m && c>=0 && c<n && board[r][c]=='O' && !vis[r][c]){
                dfs(r, c, m, n, board, vis);
            }
        }
    }
public:
    void solve(vector<vector<char>>& board) {
        int m = board.size();
        int n = board[0].size();

        queue<pair<int, int>> Q;
        vector<vector<int>> vis(m, vector<int>(n, 0));

        for(int r=0; r<m; r++){
            for(int c=0; c<n; c++){
                if(board[r][c]=='O' && (r==0 || r==m-1 || c==0 || c==n-1)){
                    Q.push({r, c});
                }
            }
        }

        while(!Q.empty()){
            pair<int, int> pos = Q.front();
            int row = pos.first;
            int col = pos.second;
            Q.pop();
            
            if(!vis[row][col]) dfs(row, col, m, n, board, vis);
        }

        for(int r=0; r<m; r++){
            for(int c=0; c<n; c++){
                if(vis[r][c]) board[r][c] = 'O';
                else board[r][c] = 'X';
            }
        }
    }
};
/*
If M = number of rows, N = number of columns, then:
TC-> O(4*M*N)
SC-> Vis Array: O(M*N) + Queue: O(M*N) + Recursion Stack: O(M+N)ASC
*/