// https://leetcode.com/problems/shuffle-the-array/description/

// Approach 1: Create an extra array
class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {

        vector<int> result;
        int i=0, j=n;
        while(i<n){
            result.push_back(nums[i++]);
            result.push_back(nums[j++]);
        }
        return result;
    }
};
/*
TC-> O(N)
SC-> Extra Array: O(2*N)ASC
*/


// Approach 2: In-Place (Bit Manipulation)
class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {

        /*
        We can see that the maximum possible value of an element of the nums array is 10^3.
        Which is 1111101000 in binary. Thus each element will take at most 10-bits in a 32-bit
        integer and the remaining bits are 0 and not used. So we can use those unused bits to store 
        the second number.
        */

        // Store each y(i) with respective x(i)
        for(int i=n; i<2*n; i++){
            int secondNum = nums[i] << 10;
            nums[i-n] |= secondNum;
        }

        // '0000000000 1111111111' in decimal.
        int allOnes = pow(2, 10) - 1;

        // We will fill the numbers from the end as they are emepty spaces
        for(int i=n-1; i>=0; i--){
            // Fetch both the numbers from the current index
            int secondNum = nums[i] >> 10;
            int firstNum = nums[i] & allOnes;
            nums[2*i] = firstNum;
            nums[2*i+1] = secondNum;
        }
        
        return nums;
    }
};
/*
TC-> O(N)
SC-> O(1), constant
*/