// https://leetcode.com/problems/wildcard-matching/

// Approach 1: Recursion (Top-Down) (TLE) + Memoization 
class Solution {
private:
    bool isAllStars(int j, string &p){
        for(int idx=0; idx<=j; idx++) if(p[idx]!='*') return false;
        return true;
    }

    bool util(int i, int j, string &s, string &p, vector<vector<int>> &dp){
        // Base case
        if (i < 0 && j < 0) return true;
        if (i >= 0 && j < 0) return false;
        if (i < 0 && j >= 0) return isAllStars(j, p);

        if(dp[i][j]!=-1) return dp[i][j];

        // Perform all operations
        if(s[i]==p[j] || p[j]=='?') return dp[i][j] = util(i-1, j-1, s, p, dp);
        else{
            if(p[j]=='*') return dp[i][j] = (util(i-1, j, s, p, dp) || util(i, j-1, s, p, dp));
            else return false;
        }
    }
public:
    bool isMatch(string s, string p) {
        int m = s.size(), n = p.size();
        vector<vector<int>> dp(m+1, vector<int>(n+1, -1));
        return util(m-1, n-1, s, p, dp);
    }
};
/*
If m = size(s), and n = size(p), then:
Recursion: 
    TC-> exponential
    SC-> Recursion Stack: O(m+n)ASC

With Memoization:
    TC-> O(m * n)
    SC-> DP Array: O(m * n) + Recursion Stack: O(m+n)ASC
*/


// Approach 2: Tabulation (Bottom-Up)
class Solution {
private:
    bool isAllStars(int j, string &p){
        for(int ind=0; ind<=j; ind++) if(p[ind]!='*') return false;
        return true;
    }
public:
    bool isMatch(string s, string p) {

        int m = s.size(), n = p.size();
        vector<vector<bool>> dp(m+2, vector<bool>(n+2, false));

        for(int i=-1; i<=m; i++){
            for(int j=-1; j<=n; j++){

                // Base case
                if (i < 0 && j < 0){
                    dp[i+1][j+1] = true;
                    continue;
                }
                if (i >= 0 && j < 0){
                    dp[i+1][j+1] = false;
                    continue;
                }
                if (i < 0 && j >= 0){
                    dp[i+1][j+1] = isAllStars(j, p);
                    continue;
                }

                // Perform all operations
                if(s[i]==p[j] || p[j]=='?') dp[i+1][j+1] = dp[i][j];
                else{
                    if(p[j]=='*') dp[i+1][j+1] = (dp[i][j+1] || dp[i+1][j]);
                    else dp[i+1][j+1] = false;
                }
            }
        }
        return dp[m][n];
    }
};
/*
If m = size(s), and n = size(p), then:
TC-> O(m * n)
SC-> DP Array: O(m * n)
*/