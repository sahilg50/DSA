// https://leetcode.com/problems/sort-colors/description/


// Approach 1: Brute Force (Sorting)
class Solution {
public:
    void sortColors(vector<int>& nums) {
        sort(nums.begin(), nums.end());
    }
};
/*
If N = size of Array, then:
TC-> O(N * LogN)
SC-> O(1)
*/

// Approach 2: Better (Find the count of 0, 1, and 2)
class Solution {
public:
    void sortColors(vector<int>& nums) {
        
        int c0 = 0, c1 = 0, c2 = 0;
        for(const int &num : nums){
            if(num == 0) c0 += 1;
            else if(num == 1) c1 += 1;
            else c2 += 1;
        }

        for(int i=0; i<c0; i++) nums[i] = 0;
        
        for(int i=c0; i<c0+c1; i++) nums[i] = 1;

        for(int i=c0+c1; i<c0+c1+c2; i++) nums[i] = 2;
    }
};
/*
If N = size of Array, then:
TC-> O(N)
SC-> O(1)
*/


// Approach 3: Optimal
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int len = nums.size();
        int low=0, mid=0, high=len-1;

        while(mid<=high){
            if(nums[mid]==0){
                swap(nums[low], nums[mid]);
                low++, mid++;
            }

            else if(nums[mid]==1) mid++;

            else{
                swap(nums[mid], nums[high]);
                high--;
            }
        }
    }
};
/*
If N = size of Array, then:
TC-> O(N)
SC-> O(1)
*/