// https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/


// Approach 1: By Finding the Length of Linked List.
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {

        // Find the length of the linked list.
        int len = 0;
        ListNode *curr = head;
        while(curr != nullptr){
            len++;
            curr = curr->next;
        }

        // Add a dummy node before the head.
        ListNode *start = new ListNode();
        start->next = head;
        

        // Move the "curr" pointer to one place before the nth place.
        int m = len - n;
        curr = start;
        while(m--) curr = curr->next;
            
        // Point the mth node; to the node ahead of nth node.
        curr->next = curr->next->next;

        return start->next;
    }
};
/*
If N is number of nodes in Linked List, then:
TC-> O(2*N)
SC-> O(1)
*/


/ Approach 2 (Striver): Fast & Slow Pointer
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {

        // Add a dummy node before the head.
        ListNode *start = new ListNode();
        start->next = head;
        
        ListNode *fast = start, *slow = start;

        // Move the fast pointer to n places forward.
        for(int i=1; i<=n; i++) fast = fast->next;

        // Now when fast pointer reaches last node;
        // slow will be pointing to the node before nth node.
        while(fast->next != nullptr){
            fast = fast->next;
            slow = slow->next;
        }
            
        slow->next = slow->next->next;

        return start->next;
    }
};
/*
If N is number of nodes in Linked List, then:
TC-> O(N)
SC-> O(1)
*/