// https://leetcode.com/problems/zero-array-transformation-ii/

// Solution: https://www.youtube.com/watch?v=8xHewtmPULs

// Approach 1: Brute Force (Iterating all the number in the ranges 1 by 1) (TLE 623/627)
class Solution {
public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // Set to keep track of indices with positive values
        set<int> activeIndices;
        for (int i = 0; i < nums.size(); i++) {
            if(nums[i] > 0) activeIndices.insert(i);
        }

        if(activeIndices.empty()) return 0;

        // Process each query
        for (int q = 0; q < queries.size(); q++) {
            int left = queries[q][0];
            int right = queries[q][1];
            int decrement = queries[q][2];

            // Apply the decrement to the specified range
            for (int i = left; i <= right; i++) {
                nums[i] -= decrement;

                // If the value is zero or negative, remove the index from the set
                if (nums[i] <= 0) {
                    activeIndices.erase(i);
                }

                // If the set is empty, all values are zero or less
                if (activeIndices.empty()) {
                    return q + 1;
                }
            }
        }

        // Not all values were zeroed after processing all queries
        return -1;
    }
};
/*
Let N = size of the array, Q = number of queries, and S = average range size per query, then:

Time Complexity:
    - Create set (active indices): O(N * LogN)
    - Process queries: O(Q * S)
    - Remove all the elements from the set: O(N * LogN) 

Space Complexity:
    - set (active indices): O(N) 
*/


// Approach 2: Difference Array (Form all subArray of queries starting from 0th index) (TLE 617/627)
class Solution {
private:
    // Check if the first (q + 1) queries can reduce all nums[i] to zero or below
    bool canTransformToZeroWithDiffArray(vector<int>& nums, vector<vector<int>>& queries, int q) {
        int n = nums.size();
        vector<int> diff(n, 0);

        // Apply the first (q + 1) queries using the difference array technique
        for (int i = 0; i <= q; ++i) {
            int left = queries[i][0];
            int right = queries[i][1];
            int value = queries[i][2];

            diff[left] += value;
            if (right + 1 < n) diff[right + 1] -= value;
        }

        // Convert the difference array into prefix sum and check each element
        for (int i = 0; i < n; ++i) {
            if (i > 0) diff[i] += diff[i - 1];

            if (nums[i] > diff[i]) return false;
        }

        return true;  
    }

public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // Early exit if nums is already all zeros
        if (accumulate(nums.begin(), nums.end(), 0) == 0) return 0;

        int Q = queries.size();
        for (int q = 0; q < Q; ++q) {
            if(canTransformToZeroWithDiffArray(nums, queries, q)) return q + 1;
        }

        // No valid transformation found
        return -1;
    }
};
/*
Let N = size of the array, Q = number of queries, then:

Time Complexity:
    - O(Q * (Q + N))

Space Complexity:
    - 1d-vector (difference array): O(N) 
*/


// Approach 3: Difference Array (Form all subarray of queries starting from 0th index using binary search)
class Solution {
private:
    // Check if the first (q + 1) queries can reduce all nums[i] to zero or below
    bool canTransformToZeroWithDiffArray(vector<int>& nums, vector<vector<int>>& queries, int q) {
        int n = nums.size();
        vector<int> diff(n, 0);

        // Apply the first (q + 1) queries using the difference array technique
        for (int i = 0; i <= q; ++i) {
            int left = queries[i][0];
            int right = queries[i][1];
            int value = queries[i][2];

            diff[left] += value;
            if (right + 1 < n) diff[right + 1] -= value;
        }

        // Convert the difference array into prefix sum and check each element
        for (int i = 0; i < n; ++i) {
            if (i > 0) diff[i] += diff[i - 1];

            if (nums[i] > diff[i]) return false;
        }

        return true;  
    }

public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        // Early exit if nums is already all zeros
        if (accumulate(nums.begin(), nums.end(), 0) == 0) return 0;

        int Q = queries.size();

        int l = 0;
        int r = Q - 1;
        int k = -1;

        while(l <= r){
            int mid = l + ((r - l) / 2);
            if(canTransformToZeroWithDiffArray(nums, queries, mid)) {
                k = mid + 1;
                r = mid - 1;
            }
            else l = mid + 1;
        }

        // No valid transformation found
        return k;
    }
};
/*
Let N = size of the array, Q = number of queries, then:

Time Complexity:
    - O(logQ * (Q + N))

Space Complexity:
    - 1d-vector (difference array): O(N) 
*/