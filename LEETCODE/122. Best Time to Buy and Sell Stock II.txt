// Approach 1: Recursion + Memoization (Bottom Up approach because it's time series data)
class Solution {
private:
    int util(int ind, int buy, vector<int> &prices, vector<vector<int>> &dp){
        // Base case
        if(ind==prices.size()) return 0;

        if(dp[ind][buy]!=-1) return dp[ind][buy];

        // buy=1 means can buy, buy=0 means can sell
        int op1, op2;
        if(buy){
            op1 = util(ind+1, 1, prices, dp);
            op2 = -prices[ind] + util(ind+1, 0, prices, dp);
        }
        else{
            op1 = util(ind+1, 0, prices, dp);
            op2 = prices[ind] + util(ind+1, 1, prices, dp);
        }

        return dp[ind][buy] = max(op1, op2);
    }
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n+1, vector<int>(2, -1));
        return util(0, 1, prices, dp);
    }
};
/*
1. Recursion 
    TC-> O(2^N), because on each day we can buy as well as sell
    SC-> Recursion stack: O(N)ASC, where N is the size of the array

2. Recursion + Memoization
    TC-> O(2*N)
    SC-> DP Array:O(2*N) Recursion stack: O(N)
*/




// Approach 2: Graphical approach
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        if(prices.size()<2)
            return 0;
        
        int profit = 0;
        for(int i=1; i<prices.size(); i++){
            if(prices[i]>prices[i-1])
                profit += prices[i] - prices[i-1];
        }
        
        return profit;
    }
};
/*
TC-> O(N), where n is the size of array
SC-> O(1), constant
*/