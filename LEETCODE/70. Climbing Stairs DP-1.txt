// Approach 2 -> Tabulation
class Solution {
private:
    int util(int n, vector<int> &dp){

        if(n<=1) return 1;

        if(dp[n]!=-1) return dp[n];
        
        int step1 = util(n-1, dp);
        int step2 = util(n-2, dp);
        
        return dp[n] = step1 + step2;

    }
public:
    int climbStairs(int n) {
        vector<int> dp(n+1, -1);
        return util(n, dp);
    }
};
/*
If N is the number of stairs then:
TC-> O(2^N)
SC-> DP Array: O(N) + Recursion Stack: O(N)ASC
*/


// Approach 2 -> Tabulation
class Solution {
public:
    int climbStairs(int n) {

        vector<int> dp(n+1);
        
        dp[0]=1, dp[1]=1;

        for(int i=2; i<=n; i++) dp[i] = dp[i-1] + dp[i-2];

        return dp[n];
    }
};
/*
If N is the number of stairs then:
TC-> O(N)
SC-> DP Array: O(N)
*/


// Approach 3 -> Space Optimization (Fibonacci Series)
class Solution {
public:
    int climbStairs(int n) {
        int a=1, b=1;

        for(int i=2; i<=n; i++){
            b = a + b;
            a = b - a;
        }
        return b;
    }
};
/*
If N is the number of stairs then:
TC-> O(N)
SC-> O(1), constant
*/