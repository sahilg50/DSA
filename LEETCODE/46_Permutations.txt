class Solution {
private:
    void recurPermute(int ind, vector<int>&nums, vector<int>&ds, vector<bool>&map, vector<vector<int>>&ans){
        if(ds.size()==nums.size()){
            ans.push_back(ds);
            return;
        }
        
        for(int i=0; i<nums.size(); i++){
            if(!map[i]){
                ds.push_back(nums[i]);
                map[i] = true;
                recurPermute(i, nums, ds, map, ans);
                ds.pop_back();
                map[i] = false;
            }
        }
    }
public:
    vector<vector<int>> permute(vector<int>& nums) {
        
        vector<vector<int>> ans; // stores all permutations
        vector<int> ds;          // ds for recursion
        vector<bool> map(nums.size(), false);   // map elements of nums
    
        recurPermute(0, nums, ds, map, ans);
        return ans;
    }
};

/*
TC-> O(N! * N), N! permutations and for each permutation there are N for loops
SC-> Ans: O(N!)ASC + Recursion Stack: O(N)ASC + DS: O(N) + Map: O(N)
*/