// https://leetcode.com/problems/count-good-triplets/?envType=daily-question&envId=2025-04-14


// Approach 1: Brute Force
class Solution {
public:
    int countGoodTriplets(vector<int>& arr, int a, int b, int c) {
        int n = arr.size();
        int count = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                for (int k = j + 1; k < n; ++k) {
                    if (abs(arr[i] - arr[j]) <= a &&
                        abs(arr[j] - arr[k]) <= b &&
                        abs(arr[i] - arr[k]) <= c) {
                        count++;
                    }
                }
            }
        }
        return cnt;
    }
};
/*
TC-> O(N^3)
SC-> O(1)
*/


// Approach 2: Optimized enumeration (Prefix Array)
class Solution {
public:
    int countGoodTriplets(vector<int>& arr, int a, int b, int c) {
        int n = arr.size();
        int count = 0;
        int prefix[1001] = {0};
        
        for(int j = 0; j < n; ++j){
            for(int k = j + 1; k < n; k++){
                if(abs(arr[j] - arr[k]) <= b){
                    
                    int l = max(arr[j] - a, arr[k] - c);
                    l = max(l, 0);

                    int r = min(arr[j] + a, arr[k] + c);
                    r = min(r, 1000);

                    if(l <= r){
                        if(l == 0) count += prefix[r];
                        else count += prefix[r] - prefix[l-1];
                    }
                }
            }

            for(int index = arr[j]; index <= 1000; ++index){
                prefix[index]++;
            }
        }
        return count;
    }
};
/*
TC-> O(N * (N + (1000^2)))
SC-> prefix Array: O(1000)
*/