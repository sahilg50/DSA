// https://leetcode.com/problems/recover-binary-search-tree/description/

// Approach 1: inOrder Traversal
// Solution: https://www.youtube.com/watch?v=ZWGW7FminDM
class Solution {
private:
    // Perform in-order traversal and store node values in the vector
    void inOrder(TreeNode *root, vector<int> &nodes){
        if(root == nullptr) return;

        inOrder(root->left, nodes);      
        nodes.push_back(root->val);
        inOrder(root->right, nodes);
    }

    // Traverse the tree again and update node values from the sorted list
    void recover(TreeNode *root, int &ind, vector<int> &nodes){
        if(root == nullptr) return;

        recover(root->left, ind, nodes); // Fix left subtree

        // Replace the incorrect value with the correct one from the sorted array
        if(root->val != nodes[ind]) root->val = nodes[ind];
        ind++; // Move to the next index in sorted array

        recover(root->right, ind, nodes); // Fix right subtree
    }

public:
    void recoverTree(TreeNode* root) {
        vector<int> nodes; 

        // Step 1: Store all node values from the in-order traversal
        inOrder(root, nodes);

        // Step 2: Sort the values to get the correct in-order sequence
        sort(nodes.begin(), nodes.end());

        // Step 3: Reassign the correct values to nodes via another in-order traversal
        int ind = 0;
        recover(root, ind, nodes);
    }
};
/*
If N = total number of nodes in the binary tree, then:
TC-> inOrder Traversal: O(N) + Sorting Nodes: O(N * LogN) + Recover Tree: O(N)
SC-> 1d-vector (nodes): O(N) + Recursion Stack: O(N)ASC
*/


// Approach 2: Finding the violations (optimal)
class Solution {
private:
    void inOrder(TreeNode* root, TreeNode* &prev, TreeNode* &first, TreeNode* &middle, TreeNode* &last){
        if(root == nullptr) return;

        inOrder(root->left, prev, first, middle, last);

        if(prev != nullptr && (root->val < prev->val)){
            // First violation
            if(first == nullptr){
                first = prev;
                middle = root;
            }
            else last = root; // Second violation
        }

        prev = root;

        inOrder(root->right, prev, first, middle, last);
    }

public:
    void recoverTree(TreeNode* root) {

        TreeNode *prev = nullptr;
        TreeNode *first = nullptr;
        TreeNode *middle = nullptr;
        TreeNode *last = nullptr;
        inOrder(root, prev, first, middle, last);

        if(first && last) swap(first->val, last->val);
        else if(first && middle) swap(first->val, middle->val);
    }
};
/*
If N = total number of nodes in the binary tree, then:
TC-> inOrder Traversal: O(N)
SC-> Recursion Stack: O(N)ASC
*/