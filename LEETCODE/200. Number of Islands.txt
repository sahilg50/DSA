// https://leetcode.com/problems/number-of-islands/description/


// Approach 1: DFS using Recursion
class Solution {
private:
    void dfs(int r, int c, int m, int n, vector<vector<char>> &grid, vector<vector<int>> &vis){

        if(r<0 || r>=m || c<0 || c>=n) return;
        if(grid[r][c]=='0' || vis[r][c]==1) return;

        vis[r][c] = 1;

        dfs(r-1, c, m, n, grid, vis); // Move Up
        dfs(r+1, c, m, n, grid, vis); // Move Down
        dfs(r, c-1, m, n, grid, vis); // Move Left
        dfs(r, c+1, m, n, grid, vis); // Move Right
    }
public:
    int numIslands(vector<vector<char>>& grid) {

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));

        int islands = 0;
        for(int r=0; r<m; r++){
            for(int c=0; c<n; c++){
                if(grid[r][c]=='1' && vis[r][c]==0){
                    dfs(r, c, m, n, grid, vis);
                    islands += 1;
                }
            }
        }

        return islands;
    }
};
/*
If M = number of rows, and N = number of columns, then:
TC -> O(4*M*N)
SC -> Vis Array: O(M*N) + Recursion Stack: O(M+N)ASC
*/


// Approach 2: BFS using Queue
class Solution {
private:
    void bfs(int r, int c, int m, int n, vector<vector<char>> &grid, vector<vector<int>> &vis){

        queue<pair<int, int>> Q;
        Q.push({r, c});
        vis[r][c] = 1;

        int delR[] = {-1, 0, +1, 0};
        int delC[] = {0, -1, 0, +1};

        while(!Q.empty()){
            r = Q.front().first;
            c = Q.front().second;
            Q.pop();

            for(int i=0; i<4; i++){
                int row = r + delR[i];
                int col = c + delC[i];
                if(row>=0 && row<m && col>=0 && col<n && grid[row][col]=='1' && !vis[row][col]){
                    Q.push({row, col});
                    vis[row][col] = 1;
                } 
            }
        }
    }
public:
    int numIslands(vector<vector<char>>& grid) {

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));

        int islands = 0;
        for(int r=0; r<m; r++){
            for(int c=0; c<n; c++){
                if(grid[r][c]=='1' && vis[r][c]==0){
                    bfs(r, c, m, n, grid, vis);
                    islands += 1;
                }
            }
        }

        return islands;
    }
};
/*
If M = number of rows, and N = number of columns, then:
TC -> O(4*M*N)
SC -> Vis Array: O(M*N) + Recursion Stack: O(M+N)ASC
*/


