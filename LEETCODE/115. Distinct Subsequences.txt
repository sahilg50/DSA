// Approach 1: Recursion(Bottom-Up)(TLE) + Memoization
class Solution {
private:
    int util(int i, int j, string &s, string &t, vector<vector<int>> &dp){
        // Base case
        if(j>=t.size()) return 1; 
        if(i>=s.size()) return 0;
        
        if(dp[i][j] != -1) return dp[i][j];

        // Perform all operations
        int match = 0, notMatch = 0;
        if(s[i] == t[j]) match = util(i+1, j+1, s, t, dp);
        notMatch = util(i+1, j, s, t, dp);
        

        // Return
        return dp[i][j] = match + notMatch;
    }
public:
    int numDistinct(string &s, string &t) {
        int m = s.size(), n = t.size();
        vector<vector<int>> dp(m+1, vector<int>(n+1, -1));
        return util(0, 0, s, t, dp);
    }
};
/*
If M = size of string 's', and N = size of string 't', then:
Recursion:
    TC-> O(M^2)
    SC-> Recursion Stack: O(M)ASC

With Memoization:
    TC-> O(M*N)
    SC-> dp (2d-vector): O(M*N) + Recursion Stack: O(M)ASC
*/


// Approach 2: Tabulation
class Solution {
public:
    int numDistinct(string &s, string &t) {
        int m = s.size(), n = t.size();
        vector<vector<double>> dp(m+1, vector<double>(n+1, -1));

        for(int i=m; i>=0; i--){
            for(int j=n; j>=0; j--){
                // Base case
                if(j>=n){
                    dp[i][j] = 1;
                    continue;
                } 
                if(i>=m){
                    dp[i][j] = 0;
                    continue;
                }

                // Perform all operations
                double match = 0, notMatch = 0;
                if(s[i] == t[j]) match = dp[i+1][j+1];
                notMatch = dp[i+1][j];

                // Return
                dp[i][j] = match + notMatch;
            }
        }
        return dp[0][0];
    }
};
/*
If M = size of string 's', and N = size of string 't', then:
TC-> O(M*N)
SC-> dp (2d-vector): O(M*N)
*/
