// Approach 1: Recursion + Memoization
class Solution {
private:
    int util(int i, int j, string &s, string &t, vector<vector<int>> &dp){
        // Base case
        if(j<0) return 1;
        if(i<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];

        if(s[i]==t[j])
        return dp[i][j] = (util(i-1, j-1, s, t, dp) + util(i-1, j, s, t, dp));

        else 
        return dp[i][j] = util(i-1, j, s, t, dp);
    }
public:
    int numDistinct(string s, string t) {
        int n = s.size(), m = t.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
        return util(n-1, m-1, s, t, dp);
    }
};
/*
TC-> O(N*M)
SC-> O(N*M)dp + O(N+M)ASC, where N=size(s) and M=size(t)
*/

// Approach 2: Tabulation
class Solution {
public:
    int numDistinct(string s, string t) {
        int m = s.size(), n = t.size();
        vector<vector<double>> dp(m+1, vector<double>(n+1, 0));

        // Base cases
        for(int i=0; i<=m; i++) dp[i][0] = 1;

        // Write the for loops
        for(int i=1; i<=m; i++){
            for(int j=1; j<=n; j++){

                if(s[i-1]==t[j-1]) dp[i][j] = dp[i-1][j-1] + dp[i-1][j];

                else dp[i][j] = dp[i-1][j];
            }
        }

        // complete the recurrence
        return dp[m][n];
    }
};
/*
TC-> O(n*m)
SC-> O(n*m), where m=size(s), n=size(t)
*/
