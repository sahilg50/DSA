// https://leetcode.com/problems/number-of-enclaves/description/


// Approach 1: Multi-Source BFS using Queue + Visited Array
class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();

        queue<pair<int, int>> Q;
        vector<vector<int>> vis(m, vector<int>(n, 0));

        int countOnes = 0;
        for(int r=0; r<m; r++){
            for(int c=0; c<n; c++){
                if(grid[r][c]==1){
                    countOnes += 1;
                    if(r==0 || r==m-1 || c==0 || c==n-1){
                        Q.push({r, c});
                        vis[r][c] = 1;
                        countOnes -= 1;
                    }
                }
            }
        }
    
        while(!Q.empty()){
            pair<int, int> indices = Q.front();
            Q.pop();
            int r = indices.first, c = indices.second;

            int deltaR[] = {-1, 0, +1, 0};
            int deltaC[] = {0, +1, 0, -1};
            for(int i=0; i<4; i++){
                int row = r + deltaR[i];
                int col = c + deltaC[i];
                if(row>=0 && row<m && col>=0 && col<n && grid[row][col]==1 && !vis[row][col]){
                    Q.push({row, col});
                    vis[row][col] = 1;
                    countOnes -= 1;
                }
            } 
        }

        return countOnes;
    }
};
/*
If M = number of rows, N = number of columns, then:
TC-> O(4*M*N)
SC-> Vis Array: O(M*N) + Queue: O(M*N)
*/


// Approach 2: DFS using Recursion + Visited Array
class Solution {
private:
    void dfs(int r, int c, int m, int n, vector<vector<int>> &grid, vector<vector<int>> &vis, int &countOnes){
        vis[r][c] = 1;
        countOnes -= 1;

        int deltaR[] = {-1, 0, +1, 0};
        int deltaC[] = {0, -1, 0, +1};
        for(int i=0; i<4; i++){
            int row = r + deltaR[i];
            int col = c + deltaC[i];
            if(row>=0 && row<m && col>=0 && col<n && grid[row][col] && !vis[row][col]){
                dfs(row, col, m, n, grid, vis, countOnes);
            }
        }
    }
public:
    int numEnclaves(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        queue<pair<int, int>> Q;
        vector<vector<int>> vis(m, vector<int>(n, 0));

        int countOnes = 0;
        for(int r=0; r<m; r++){
            for(int c=0; c<n; c++){
                if(grid[r][c]==1){
                    countOnes += 1;
                    if(r==0 || r==m-1 || c==0 || c==n-1){
                        Q.push({r, c});
                    }
                }
            }
        }

        while(!Q.empty()){
            pair<int, int> pos = Q.front();
            int r = pos.first, c = pos.second;
            Q.pop();

            if(!vis[r][c]){
                dfs(r, c, m, n, grid, vis, countOnes);
            }
        }

        return countOnes;
    }
};
/*
If M = number of rows, N = number of columns, then:
TC-> O(4*M*N)
SC-> Vis Array: O(M*N) + Queue: O(M*N) + Recursion Stack: O(M+N)ASC
*/