// https://leetcode.com/problems/delete-operation-for-two-strings/description/


// Approach 1: Recursion(Bottom - Up)(TLE) + Memoization
class Solution {
private:
    int lcs(int i, int j, const string &word1, const string &word2, vector<vector<int>> &dp){
        
        if(i>=word1.size() || j>=word2.size()) return 0;
        
        if(dp[i][j]!=-1) return dp[i][j];

        if(word1[i]==word2[j]) return 1 + lcs(i+1, j+1, word1, word2, dp);

        return dp[i][j] = max(lcs(i, j+1, word1, word2, dp), lcs(i+1, j, word1, word2, dp));
    }
public:
    int minDistance(string &word1, string &word2) {
        int m = word1.size(), n = word2.size();
        vector<vector<int>> dp(m+1, vector<int>(n, -1));
        
        int LCS = lcs(0, 0, word1, word2, dp);
        return m + n - (2 * LCS);
    }
};
/*
If M = size of word1, and M = size of word2, then:
Recursion:
    TC-> O(2^N * 2^M), Trying out all the subsequences of both texts.
    SC-> Recursion Stack: O(N + M)ASC

With Memoization:
    TC-> O(N * M)
    SC-> DP Array: O(N * M) + Recursion Stack: O(N + M)ASC
*/
