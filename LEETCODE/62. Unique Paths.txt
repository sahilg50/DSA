// https://leetcode.com/problems/unique-paths/submissions/908315153/


// Approach 1: Recursion(TLE)(Bottom - Up) + Memoization
class Solution {
private:
    int move(int i, int j, int m, int n, vector<vector<int>> &dp){
        if(i>=m || j>=n) return 0;
        if(i==m-1 && j==n-1) return 1;
        if(dp[i][j]!=-1) return dp[i][j];

        return dp[i][j] = move(i+1, j, m, n, dp) + move(i, j+1, m, n, dp);

    }
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return move(0, 0, m, n, dp);
    }
};
/*
If M and N are the number of rows and columns then:
Recursion:
    TC-> O(2^(M*N))
    SC-> Recursion Stack: O(M+N)ASC
With Memoization:
    TC-> O(M*N)
    SC-> Dp Array: O(M*N) + Recursion Stack: O(M+N)ASC
*/


// Approach 2: Tabulation(Top - Down)
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+2, vector<int>(n+2, 0));
        for(int i=m; i>=0; i--){
            for(int j=n; j>=0; j--){
                if(i>=m || j>=n) dp[i][j] = 0;
                else if(i==m-1 && j==n-1) dp[i][j] = 1;
                else dp[i][j] = dp[i+1][j] + dp[i][j+1];
            }
        }
        return dp[0][0];
    }
};
/*
If M and N are the number of rows and columns then:
TC-> O(M*N)
SC-> Dp Array: O(M*N)
*/


/*
Approach 3: nCr

Explanation: 
https://takeuforward.org/data-structure/grid-unique-paths-count-paths-from-left-top-to-the-right-bottom-of-a-matrix/

Matrix = 3 * 7

Down steps(D) = m-1 = 2
Right steps(R) = n-1 = 6

Total steps(S): D + R = 8

From total steps(S), we'll pick unique combination of steps at which we'll move down(D), hence the remaining will be move right(R). This results in a unique path every time. So the idea is to have unique combinations by picking D out of S; or conversely have unique combinations by picking R out of 

S S S S S S S S

D D R R R R R R

R R D R R R D R

R D R D R R R R

8C2 or 8C6

1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 / (1 * 2) * (1 * 2 * 3 * 4 * 5 * 6)

7 * 8 / 1 * 2

(8 / 1) * (7 / 2)

(N/i) * (N-1/i+1)
*/

class Solution {
public:
    int uniquePaths(int m, int n) {
        int N = n+m-2; 
        int r = min(n,m) - 1;
        
        double res = 1;
        for(int i=1; i<=r; ++i, N--) res = res * (N) / i;
        
        return (int)res;
    }
};
/*
TC-> O(min(n, m))
SC-> O(1), constant
*/


Matrix = 3 * 7

D = m-1 = 2
R = n-1 = 6

Total steps: D + R = 8

S S S S S S S S

D D R R R R R R

R R D R R R D R

R D R D R R R R

8C2 or 8C6

1 1 1 1 1 1 1

1 0 1 1 0 1 0

0 1 0 0 1 1 1

1 1 1 1 0 0 0 

1 1 0 1 0 1 0

7C3 or 7C4

NCr or NCn-r

8! / (2! * 6!)

1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 / (1 * 2) * (1 * 2 * 3 * 4 * 5 * 6)

7 * 8 / 1 * 2

(8 / 1) * (7 / 2)

(N/i) * (N-1/i+1)