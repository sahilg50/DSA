// https://leetcode.com/problems/longest-common-subsequence/description/


// Approach 1: Recursion (Bottom-Up) (TLE) + Memoization
class Solution {
private:
    int lcs(int i, int j, const string &text1, const string &text2, vector<vector<int>> &dp){
        
        // Base case
        if(i>=text1.size() || j>=text2.size()) return 0;
        
        if(dp[i][j]!=-1) return dp[i][j];

        // Perform all operations
        if(text1[i]==text2[j]) return dp[i][j] = 1 + lcs(i+1, j+1, text1, text2, dp);

        return dp[i][j] = max(lcs(i, j+1, text1, text2, dp), lcs(i+1, j, text1, text2, dp));
    }
public:
    int longestCommonSubsequence(const string &text1, const string &text2) {
        int n = text1.size(), m = text2.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
        return lcs(0, 0, text1, text2, dp);
    }
};
/*
If N = size of text1, and M = size of text2, then:
Recursion:
    TC-> O(2^N * 2^M), Trying out all the subsequences of both texts.
    SC-> Recursion Stack: O(N + M)ASC

With Memoization:
    TC-> O(N * M)
    SC-> DP Array: O(N * M) + Recursion Stack: O(N + M)ASC
*/


// Approach 2: Tabulation (Top-Down)
class Solution {
public:
    int longestCommonSubsequence(const string &text1, const string &text2) {
        
        int n = text1.size(), m = text2.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));

        for(int i=n; i>=0; i--){
            for(int j=m; j>=0; j--){
                
                // Base case
                if(i>=n || j>=m){
                    dp[i][j] = 0;
                    continue;
                }

                // Perform all operations
                if(text1[i]==text2[j]) dp[i][j] = 1 + dp[i+1][j+1];

                else dp[i][j] = max(dp[i][j+1], dp[i+1][j]);
            }
        }
        return dp[0][0];
    }
};
/*
If N = size of text1, and M = size of text2, then:
TC-> O(N * M)
SC-> DP Array: O(N * M)
*/


// Approach 3: Space Optimization(Top-Down)
class Solution {
public:
    int longestCommonSubsequence(const string &text1, const string &text2) {
        
        int n = text1.size(), m = text2.size();
        vector<int> curr(m+1), prev(m+1);

        for(int i=n; i>=0; i--){
            for(int j=m; j>=0; j--){
                
                // Base case
                if(i>=n || j>=m){
                    curr[j] = 0;
                    continue;
                }

                // Perform all operations
                if(text1[i]==text2[j]) curr[j] = 1 + prev[j+1];

                else curr[j] = max(curr[j+1], prev[j]);
            }
            prev = curr;
        }
        return curr[0];
    }
};
/*
If N = size of text1, and M = size of text2, then:
TC-> O(N * M)
SC-> Prev Array: O(M) + Curr Array: O(M)
*/


/*
Approach 4: Print LCS String (Tabulation)(Top Down)
    Using tabulation method to form the dp table and then using it to print the lcs string.
*/
string lcs(const string &s, const string &t)
{
    int n = s.size(), m = t.size();
    vector<vector<int>> dp(n + 1, vector<int>(m + 1, -1));

    for (int i = n; i >= 0; i--)
    {
        for (int j = m; j >= 0; j--)
        {

            if (i >= n || j >= m)
                dp[i][j] = 0;

            else if (s[i] == t[j])
                dp[i][j] = 1 + dp[i + 1][j + 1];

            else
                dp[i][j] = max(dp[i][j + 1], dp[i + 1][j]);
        }
    }
    // cout << dp[0][0];

    string ans = "";
    int i = 0, j = 0;
    while (i < n && j < m)
    {
        if (s[i] == t[j])
        {
            ans.push_back(s[i]);
            i++, j++;
        }
        else if (dp[i][j + 1] > dp[i + 1][j])
            j++;
        else
            i++;
    }
    return ans;
}