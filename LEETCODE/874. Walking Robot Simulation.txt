// https://leetcode.com/problems/walking-robot-simulation/description/?envType=daily-question&envId=2024-09-04


// Approach 1: Optimal (Hashing + Unordered_set)
// Solution: Editorial
class Solution {
private:
    static const int HASH_MULTIPLIER = 60001; // Slightly larger than 2 * max coordinate value

    // Hash function to convert (x, y) coordinates to a unique integer value.
    int hashCoordinates(int x, int y){
        return x + HASH_MULTIPLIER * y;
    }

public:
    int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {

        // store the obstacles in an unordered_set for efficient lookup
        unordered_set<int> obstacleSet;
        for(auto &obstacle : obstacles){
            obstacleSet.insert(hashCoordinates(obstacle[0], obstacle[1]));
        }

        // Define direction vectors; North, East, South, West
        vector<vector<int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

        vector<int> currentPosition = {0, 0};
        int maxDistanceSquared = 0;
        int currentDirection = 0; // 0: North, 1: East, 2: South, 3: West
        
        for(int command : commands){
            if(command == -1){
                // Turn right
                currentDirection = (currentDirection + 1) % 4;
            }
            else if(command == -2){
                // Turn left
                currentDirection = (currentDirection + 3) % 4;

            }
            else{
                vector<int> direction = directions[currentDirection];
                for(int step=0; step < command; step++){
                    int nextX = currentPosition[0] + direction[0];
                    int nextY = currentPosition[1] + direction[1];
                    if(obstacleSet.contains(hashCoordinates(nextX, nextY))) break;
                    currentPosition[0] = nextX;
                    currentPosition[1] = nextY;
                }
                int currentDistanceSquared = (currentPosition[0] * currentPosition[0]) + (currentPosition[1] * currentPosition[1]);
                maxDistanceSquared = max(maxDistanceSquared, currentDistanceSquared);
            }
        }
        return maxDistanceSquared;
    }   
};
/*
Let M = size of commands, and N = size of obstacles, then:
TC-> Hash obstacles and store in obstacleSet: O(N) + Iterate commands: O(9 * M) (Assuming that all are positive integers in the set and each command is limited to 9)
SC-> obstacleSet (unordered_set): O(N)
*/