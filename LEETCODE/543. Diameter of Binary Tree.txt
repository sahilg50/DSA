// https://leetcode.com/problems/diameter-of-binary-tree/description/


// Approach 1: Brute Force (Recursion + Iteration)
class Solution {
private:
    int maxDiameter = 0;

    // Find max depth of the tree from a particular node
    int maxDepth(TreeNode *node){
        if(node == nullptr) return 0;

        int lh = maxDepth(node->left);
        int rh = maxDepth(node->right);

        return max(lh, rh) + 1;
    }

    // Iterate all the nodes of the tree 1 by 1
    void iterate(TreeNode *node){
        if(node == nullptr) return;

        // Check if tree from current node is balanced or not.
        int lh = maxDepth(node->left);
        int rh = maxDepth(node->right);
        maxDiameter = max(maxDiameter, (lh+rh));

        // Move to the left node
        iterate(node->left);

        // Move to the right node
        iterate(node->right);

        return;
    }
public:
    int diameterOfBinaryTree(TreeNode *root) {
        iterate(root);
        return maxDiameter;
    }
};
/*
If N = number of nodes in binary tree, then:
TC-> O(N^2)
SC-> Recursion Stack: O(N)ASC
*/


// Approach 2: Recursion (Using maxDepth as base)
class Solution {
private:
    int maxDiameter = 0;

    int maxDepth(TreeNode *node){
        if(node == nullptr) return 0;

        int lh = maxDepth(node->left);
        int rh = maxDepth(node->right);
    
        maxDiameter = max(maxDiameter, (lh + rh));

        return max(lh, rh) + 1;
    }
public:
    int diameterOfBinaryTree(TreeNode *root) {
        maxDepth(root);
        return maxDiameter;
    }
};
/*
If N = number of nodes in binary tree, then:
TC-> O(N)
SC-> Recursion Stack: O(N)ASC
*/