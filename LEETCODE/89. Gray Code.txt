// https://leetcode.com/problems/gray-code/description/

// Approach 1: Recursion
class Solution {
private:
    vector<string> util(int n){
        // Base case
        if(n == 1) return {"0", "1"};

        // Perform all operations
        vector<string> recur_result = util(n-1);
        vector<string> my_result;
        for(auto it : recur_result) my_result.push_back("0" + it);
        for(auto it = recur_result.rbegin(); it != recur_result.rend(); it++) my_result.push_back("1" + *it);

        return my_result;
    }
public:
    vector<int> grayCode(int n) {
        vector<string> binaryCodes = util(n);

        vector<int> integers;
        for(auto binaryCode : binaryCodes) cout<<binaryCode<<" ";
        for(auto stringCode : binaryCodes) integers.push_back(stoi(stringCode, nullptr, 2));

        return integers;
    }
};
/*
If n is the max number of bits, then:
TC-> O(2 * (2^n - 1))
SC-> Recursion Stack: O(n)ASC + 1d-vector (my_result): O(2^n) 
*/
