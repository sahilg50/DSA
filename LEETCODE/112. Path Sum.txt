/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    bool isLeaf(TreeNode* node){
        return (node->left==nullptr && node->right==nullptr);
    }
    bool pathRecur(TreeNode* node, int T){
        if(isLeaf(node)) return T==0;

        bool left=false, right=false;
        if(node->left)  left = pathRecur(node->left, T-node->left->val);
        if(left) return true;
        if(node->right) right = pathRecur(node->right, T-node->right->val);
        if(right) return true;

        return false;
    }
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        if(!root) return false;
        return pathRecur(root, targetSum-root->val);
    }
};
/*
TC-> O(N), N is the number of nodes in the binary tree
SC-> Recursion Stack: O(N)ASC
*/