// https://leetcode.com/problems/search-a-2d-matrix/description/


// Approach 1: Brute Force (Linear Search)
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int M = matrix.size();
        int N = matrix[0].size();

        for(int r=0; r<M; r++){
            for(int c=0; c<N; c++){
                if(matrix[r][c] == target) return true;
            }
        }

        return false;
    }
};
/*
If M = number of rows, N = number of cols, then:
TC -> O(M*N)
SC -> O(1)
*/


// Approach 2: Optimal Solution
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int M = matrix.size();
        int N = matrix[0].size();

        int r = 0, c = N-1;
        while(r<M && c>=0){
            if(matrix[r][c] < target) r++;
            else if(matrix[r][c] > target) c--;
            else return true;
        }

        return false;
    }
};
/*
If M = number of rows, N = number of cols, then:
TC -> O(M + N)
SC -> O(1)
*/