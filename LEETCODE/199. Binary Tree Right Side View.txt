// https://leetcode.com/problems/binary-tree-right-side-view/description/


// Approach 1: Optimal (Level Order Traversal) (Queue + Map)
class Solution {
public:
    vector<int> rightSideView(TreeNode *root) {
        vector<int> result;
        map<int, int> M;

        queue<pair<TreeNode *, int>> Q;
        if(root) Q.push({root, 0});

        while(!Q.empty()){
            auto temp = Q.front();
            Q.pop();

            TreeNode *node = temp.first;
            int level = temp.second;

            M[level] = node->val;
            
            if(node->left) Q.push({node->left, level+1});
            if(node->right) Q.push({node->right, level+1});
        }

        for(auto it : M) result.push_back(it.second);

        return result;
    }
};
/*
If N = number of nodes in the binary tree, then:
TC-> Level Order Traversal: O(N) + Insert into Map: O(logN!)
SC-> Queue: O(N) + Map: O(N) + Result: O(N)ASC
*/