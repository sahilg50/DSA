// https://leetcode.com/problems/next-permutation/


// Approach 1: Using STL
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        next_permutation(nums.begin(), nums.end());
    }
};


// Approach 2: Finding the breakpoint of increasing order from behind.
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        
        int len = nums.size(), ind = -1;

        // Find the index at which the increasing order breaks from behind.
        for(int i=len-2; i>=0; i--){
            if(nums[i]<nums[i+1]){
                ind = i; 
                break;
            }
        }

        // If the entire array is in increasing order from behind, then reverse the array.
        if(ind == -1){
            reverse(nums.begin(), nums.end());
            return;
        }

        // Swap the nums[index] with the first larger element from behind.
        for(int i=len-1; i>ind; i--){
            if(nums[i]>nums[ind]){
                swap(nums[i], nums[ind]);
                break;
            }
        }

        // Sort the indices from ind+1 -> len(array)
        reverse(nums.begin()+ind+1, nums.end());
    }
};
/*
If N = size of array then:
TC-> Finding Index: O(N) + Reverse: O(N) + Swap: O(N) + Sort: O(NLogN)
SC-> O(1)
*/