// https://leetcode.com/problems/shortest-common-supersequence/description/?envType=daily-question&envId=2025-02-28


// Approach 1: Tabulation (Top-Down)
class Solution {
public:
    string shortestCommonSupersequence(string &str1, string &str2) {

        int m = str1.size(), n = str2.size();
        vector<vector<int>> dp(m+1, vector<int>(n+1, -1));

        // Find LCS
        for(int i=m; i>=0; i--){
            for(int j=n; j>=0; j--){

                // Base case
                if(i>=m || j>=n){
                    dp[i][j] = 0;
                    continue;
                }

                // Perform all operations
                if(str1[i] == str2[j]) dp[i][j] = 1 + dp[i+1][j+1];
                else dp[i][j] = max(dp[i][j+1], dp[i+1][j]);
            }
        }
    

        // Find Shortest Common Super Sequence
        string ans = "";
        int i = 0, j = 0;
        while(i < m && j < n){
            cout << i << " " << j << endl;
            if(str1[i] == str2[j]){
                ans.push_back(str1[i]);
                i++, j++;
            }
            else if(dp[i+1][j] > dp[i][j+1]){
                ans.push_back(str1[i]);
                i++;
            }
            else{
                ans.push_back(str2[j]);
                j++;
            }
        }

        // Add the remaining elements from each of the strings
        while(i < m) ans.push_back(str1[i++]);
        while(j < n) ans.push_back(str2[j++]);

        return ans;
    }
};
/*
If M = size of str1, and N = size of str2, then:
TC-> Find LCS: (M*N) +  FindO(M+N)
SC-> dp (2-d vector): O(M*N)
*/