// Approach 1: Recursion(Bottom-Up, Because it is time series data)(TLE) + Memoization
class Solution {
private:
    int util(int ind, int buy, vector<int> &prices, vector<vector<vector<int>>> &dp, int T){
        
        if(ind==prices.size() || T<=0) return 0;

        if(dp[ind][buy][T]!=-1) return dp[ind][buy][T];

        // buy=1 means can buy, buy=0 means can sell
        int op1, op2;
        if(buy){
            op1 = util(ind+1, 1, prices, dp, T);
            op2 = -prices[ind] + util(ind+1, 0, prices, dp, T);
        }
        else{
            op1 = util(ind+1, 0, prices, dp, T);
            // On selling transaction is complete, therefore T-1
            op2 = prices[ind] + util(ind+1, 1, prices, dp, T-1);
        }

        return dp[ind][buy][T] = max(op1, op2);
    }
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        /*
        T transactions remaining
        */
        int T = 2; 
        vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2,vector<int>(T+1, -1)));
        return util(0, 1, prices, dp, T);
    }
};
/*
If N = size(array), then:
1. Recursion:
    TC-> O(exponential) ~= O(2^N)
    SC-> Recursion Stack: O(N)ASC

2.Recursion + Memoization
    TC-> O(N*2*(T+1))
    SC-> DP Array: O(N*2*(T+1)) + Recursion Stack: O(N)ASC
*/