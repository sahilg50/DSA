// https://leetcode.com/problems/burst-balloons/description/


// Approach 1: Recursion(TLE)(Top-Down) + Memoization
class Solution {
private:
    int util(int i, int j, vector<int> &nums, vector<vector<int>> &dp){
        if(i>j) return 0;
        if(dp[i][j]!=-1) return dp[i][j];

        int ans = INT_MIN;
        for(int k=i; k<=j; k++){
            int cost = (nums[i-1]*nums[k]*nums[j+1]) + util(i, k-1, nums, dp) + util(k+1, j, nums, dp);
            ans = max(ans, cost);
        }
        return dp[i][j] = ans;
    }
public:
    int maxCoins(vector<int>& nums) {
        nums.insert(nums.begin(), 1);
        nums.push_back(1);
        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(n, -1));
        return util(1, n-2, nums, dp);
    }
};
/*
If N is the size of the nums array then:
Recursion:
    TC-> Exponential ~= O(N^N)
    SC-> Recursion Stack: O(N)ASC

With Memoization:
    TC-> O(N^3)
    SC-> Dp Array: O(N^2) + Recursion Stack: O(N)ASC
*/


// Approach 2: Tabulation (Bottom-Up)
class Solution {
public:
    int maxCoins(vector<int>& nums) {
        nums.insert(nums.begin(), 1);
        nums.push_back(1);
        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));

        for(int i=n-2; i>=1; i--){
            for(int j=1; j<=n-2; j++){
                if(i>j) continue;
                int ans = INT_MIN;
                for(int k=i; k<=j; k++){
                    int cost = (nums[i-1]*nums[k]*nums[j+1]) + dp[i][k-1] + dp[k+1][j];
                    ans = max(ans, cost);
                }
                dp[i][j] = ans;
            }
        }
        return dp[1][n-2];
    }
};
/*
If N is the size of the nums array then:
TC-> O(N^3)
SC-> Dp Array: O(N^2)
*/
