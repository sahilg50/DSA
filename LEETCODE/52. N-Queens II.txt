// https://leetcode.com/problems/n-queens-ii/description/

// Approach 1: Backtracking
class Solution {
private:
    // method to check if we can place a queen at (r, c)
    bool isValid(int r, int c, int n, vector<vector<int>> &board){
        // Check column
        int R=0, C=c;
        while(R<n){
            if(board[R][C] == 1) return false;
            R++;
        }

        // Check left diagonal
        R=r, C=c;
        while(R>=0 && C>=0){
            if(board[R][C] == 1) return false;
            R--, C--;
        }

        R=r, C=c;
        while(R<n && C<n){
            if(board[R][C] == 1) return false;
            R++, C++;
        }

        // Check right diagonal
        R=r, C=c;
        while(R>=0 && C<n){
            if(board[R][C] == 1) return false;
            R--, C++;
        }

        R=r, C=c;
        while(R<n && C>=0){
            if(board[R][C] == 1) return false;
            R++, C--;
        }

        return true;
    }

    int util(int r, int n, vector<vector<int>> &board){
        // Base case
        if(r >= n) return 1;

        // Perform all operations + backtrack
        int ans = 0;
        for(int c=0; c<n; c++){
            if(isValid(r, c, n, board)){
                board[r][c] = 1;
                ans += util(r+1, n, board);
                board[r][c] = 0;
            }
        }

        return ans;
    }
public:
    int totalNQueens(int n) {

        vector<vector<int>> board(n, vector<int>(n, 0));

        return util(0, n, board);
    }
};
/*
If N = number of Rows, and number of Columns of the chess board, then:
TC-> Recursion: O(N!) * isValid(method): O(N)
SC-> board(2d vector): O(N*N) + Recursion Stack: O(N)ASC
*/


// Approach 2: Optimal (Backtracking + Bit-masking)
class Solution {
private:
    // Method to check is we can place the queen at (r, c) using bit-masking
    bool isValid(int r, int c, int n, int columns, int leftDiagonal, int rightDiagonal){

        if((columns & (1 << c))) return false;

        if((leftDiagonal & (1 << (r+c)))) return false;

        if((rightDiagonal & (1 << (r-c+n)))) return false;

        return true;
    }

    int util(int r, int n, int columns, int leftDiagonal, int rightDiagonal){

        // Base case
        if(r >= n) return 1;

        // Perform all operations
        int ans = 0;
        for(int c=0; c<n; c++){
            if(isValid(r, c, n, columns, leftDiagonal, rightDiagonal)){
                
                // Place the queen using bit-masking
                columns |= (1 << c);
                leftDiagonal |= (1 << (r+c));
                rightDiagonal |= (1 << (r-c+n));
                
                ans += util(r+1, n, columns, leftDiagonal, rightDiagonal);

                // Backtrack (remove the queen using bit-masking)
                columns &= ~(1 << c);
                leftDiagonal &= ~(1 << (r+c));
                rightDiagonal &= ~(1 << (r-c+n));
            }
        }

        return ans;
    }
public:
    int totalNQueens(int n) {
        return util(0, n, 0, 0, 0);
    }
};
/*
If N = number of Rows, and number of Columns of the chess board, then:
TC-> OO(N!)
SC-> Recursion Stack: O(N)ASC
*/