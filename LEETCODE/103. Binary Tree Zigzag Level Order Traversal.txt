// https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/description/


// Approach 1: Optimal (Level Order Traversal + QUEUE)
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode *root) {
        vector<vector<int>> ans;

        queue<TreeNode* > Q;
        if(root != nullptr) Q.push(root);

        bool LToR = true;

        while(!Q.empty()){
            int size = Q.size();
            
            vector<int> level;

            while(size--){
                TreeNode *node = Q.front(); 
                Q.pop();

                level.push_back(node->val);

                if(node->left) Q.push(node->left);
                if(node->right) Q.push(node->right);
            }

            if(!LToR) reverse(level.begin(), level.end());
            LToR = !LToR;

            ans.push_back(level);
        }
        
        return ans;
    }
};
/*
If N = number of nodes in the tree, then:
TC-> O(N)
SC-> Queue: O(N) + Ans Array: O(N)ASC + Level Array: O(N)
*/