/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// Approach 1 -> Recursion
class Solution {
private: 
    TreeNode *prev;
public:
    void flatten(TreeNode* root) {
        if(!root) return;
        
        flatten(root->right);
        flatten(root->left);
        
        root->right = prev;
        root->left = nullptr;
        prev = root;
    }
};
/*
TC-> O(N)
SC-> Recursion Stack:O(N)ASC, N is the number of nodes in the binary tree
*/


// Approach 2-> Stack
class Solution {
public:
    void flatten(TreeNode* root) {
        if(!root) return;

        stack<TreeNode*> s;
        s.push(root);
        while(!s.empty()){
            TreeNode *curr = s.top();
            s.pop();
            
            if(curr->right) s.push(curr->right);
            if(curr->left) s.push(curr->left);
            
            if(!s.empty()){
                curr->right = s.top();
                curr->left = nullptr;
            }
        }
    }
};
/*
TC-> O(N)
SC-> Stack:O(N)
*/