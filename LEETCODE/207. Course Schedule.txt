// https://leetcode.com/problems/course-schedule/


// Approach 1: Topological Sort (Kahn's Algo) (BFS + Queue + Adjacency List) 
class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {

        vector<int> adj[numCourses];
        for(auto it: prerequisites){
            adj[it[0]].push_back(it[1]);
        }

        vector<int> inDegree(numCourses);
        for(int node=0; node<numCourses; node++){
            for(auto neighbor : adj[node]){
                inDegree[neighbor]++;
            }
        }

        queue<int> Q;
        for(int node=0; node<numCourses; node++){
            if(inDegree[node]==0) Q.push(node);
        }

        vector<int> topoSort;
        while(!Q.empty()){
            int node = Q.front();
            Q.pop();
            topoSort.push_back(node);

            for(int neighbor : adj[node]){
                inDegree[neighbor]--;
                if(inDegree[neighbor]==0) Q.push(neighbor);
            }
        }

        // If the size is same then it means that no cycle was there in the graph.
        if(topoSort.size() == numCourses) return true;
        
        return false;
    }
};
/*
TC-> Make adj list: O(E) + Make InDegree: O(V + E) + Start Queue: O(V) + Process Queue: O(V + E)
SC-> InDegree: O(V) + Queue: O(V) + Topo: O(V)ASC
*/

NOTE: If we've to use DFS approach to solve this question, then first we've to find if the graph is cyclic or not. If the graph is acyclic, only then we can use DFS approach.