// https://leetcode.com/problems/maximum-depth-of-binary-tree/description/

// Approach 1: Recursion (DFS)
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==nullptr) return 0;
        
        int lh = maxDepth(root->left);
        int rh = maxDepth(root->right);
        
        return 1 + max(lh, rh);
    }
};
/*
If N is the number of nodes in the BT then:
TC-> O(N)
SC-> Recursion Stack: O(N)ASC
*/


// Approach 2: Recursion (BFS)
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root == NULL) return 0;

        int height = 0;
        queue<TreeNode *> q;
        q.push(root);
        while(!q.empty()){
            height++;
            int size = q.size();
            for(int i=0; i<size; i++){
                TreeNode *node = q.front();
                q.pop();
                if(node->left != NULL) q.push(node->left);
                if(node->right != NULL) q.push(node->right);
            }
        }
        
        return height;
    }
};
/*
If N is the number of nodes in the BT then:
TC-> O(N)
SC-> Queue: O(N)
*/