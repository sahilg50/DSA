class Solution {
private:
    bool isValid(vector<vector<char>>& B, int row, int col, char c){
        for(int i=0; i<9; i++){
            if(B[i][col]==c) return false;
            
            if(B[row][i]==c) return false;
            
            if (B[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c) return false;
        }
        return true;
    }
    
    bool solve(vector<vector<char>>& B){
        for(int i=0; i<B.size(); i++){
            for(int j=0; j<B[0].size(); j++){
                if(B[i][j]=='.'){
                    for(char c='1'; c<='9'; c++){
                        if(isValid(B, i, j, c)){
                            B[i][j]=c;
                            if(solve(B)) return true;
                            //BackTrack
                            else B[i][j]='.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};

Time Complexity: O(9(n ^ 2)), in the worst case, for each cell in the n2 board, we have 9 possible numbers.

Space Complexity: O(1), since we are refilling the given board itself, there is no extra space required, so constant space complexity.