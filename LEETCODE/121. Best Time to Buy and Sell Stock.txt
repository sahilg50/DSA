// https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/


// Approach 1: Brute Force (Nested For Loop)
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        int n = prices.size();
        int maxi = 0;

        for(int i=0; i<n; i++){
            for(int j=i; j<n; j++){
                maxi = max(maxi, (prices[j] - prices[i]));
            }
        }
        return maxi;
    }   
};
/*
If N = size of prices, then:
TC-> o(N^2)
SC-> O(1)
*/


// Approach 2: Optimal 
class Solution {
public:
    int maxProfit(vector<int>& prices) {

        int minPrice = prices[0];
        int maxProfit = 0;

        for(int ind=1; ind<prices.size(); ind++){

            int profit = prices[ind] - minPrice;
            maxProfit = max(maxProfit, profit);

            minPrice = min(minPrice, prices[ind]);
        }
        return maxProfit;
    }
};
/*
If N = size(array), then:
TC-> O(N)
SC-> O(1)
*/