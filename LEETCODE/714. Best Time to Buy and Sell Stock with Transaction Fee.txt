// 1. Approach: Recursion(Bottom-Up, Because it is time series data)(TLE) + Memoization
class Solution {
private:
    int util(int ind, int buy, int fee, vector<int> &prices, vector<vector<int>> &dp){

        if(ind==prices.size()) return 0;

        if(dp[ind][buy]!=-1) return dp[ind][buy];
    
        int op1, op2;
        // buy==1 means we can buy, else we can only sell
        if(buy){
            op1 = util(ind+1, 1, fee, prices, dp);
            op2 = -prices[ind] + util(ind+1, 0, fee, prices, dp); 
        }
        else{
            op1 = util(ind+1, 0, fee, prices, dp);
            op2 = prices[ind] - fee + util(ind+1, 1, fee, prices, dp);  
        }

        return dp[ind][buy] = max(op1, op2);
    }

public:
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<vector<int>> dp(n+1, vector<int>(2, -1));
        return util(0, 1, fee, prices, dp);
    }
};
/*
If N = size(array), then:
1. Recursion:
    TC-> O(exponential) ~= O(2^N)
    SC-> Recursion Stack: O(N)ASC

2. Recursion + Memoization
    TC-> O(N*2)
    Sc-> DP Array: O(N*2) + Recursion Stack: O(N)ASC
*/


// 2. Approach: Tabulation
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<vector<int>> dp(n+1, vector<int>(2, 0));

        for(int ind=n-1; ind>=0; ind--){
            for(int buy=1; buy>=0; buy--){
                int profit;
                if(buy) profit = max(dp[ind+1][1], (-prices[ind] + dp[ind+1][0])); 
                else profit = max(dp[ind+1][0], (prices[ind] - fee + dp[ind+1][1]));
                dp[ind][buy] = profit;
            }
        }
        return dp[0][1];
    }
};
/*
If N = size(array), then:
1. Tabulation
    TC-> O(N*2)
    SC-> DP Array: O(N*2)
*/