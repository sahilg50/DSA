// https://leetcode.com/problems/merge-two-sorted-lists/description/


// Approach 1: Creating External Linked List
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == nullptr) return l2;
        if(l2 == nullptr) return l1;
    

        ListNode *head = nullptr, *curr = nullptr;
        while(l1 != nullptr && l2 != nullptr){

            ListNode *temp;
            if(l1->val < l2->val){
                temp = new ListNode(l1->val);
                l1 = l1->next;
            }
            else{
                temp = new ListNode(l2->val);
                l2 = l2->next;
            }
            
            if(head == nullptr){
                head = temp, curr = temp;
            }
            else{
                curr->next = temp;
                curr = curr->next;
            }
        }

        if(l1 != nullptr) curr->next = l1;
        if(l2 != nullptr) curr->next = l2;

        return head;
    }
};
/*
If M = len(List1), N = len(List2), then:
TC-> While Loop: O(M + N)
SC-> New Linked List: O(M + N)
*/


// Approach 2: In Place
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == nullptr) return l2;
        if(l2 == nullptr) return l1;
        if(l1->val > l2->val) swap(l1 , l2);
    
        ListNode *head = l1, *curr = l1;
        l1 = l1->next;
        
        while(l1 != nullptr && l2 != nullptr){

            if(l1->val < l2->val){
                curr->next = l1;
                l1 = l1->next;
            }
            else{
                curr->next = l2;
                l2 = l2->next;
            }

            curr = curr->next;
        }

        if(l1 != nullptr) curr->next = l1;
        if(l2 != nullptr) curr->next = l2;

        return head;
    }
};
/*
If M = len(List1), N = len(List2), then:
TC-> While Loop: O(M + N)
SC-> O(1)
*/