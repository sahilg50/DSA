// Approach 1: Recursion(TLE) + Memoization
class Solution {
private:
    int util(int n, vector<int> &dp){
        if(n<=1) return n;
        if(n==2) return 1;

        if(dp[n]!=-1) return dp[n];

        return dp[n] = util(n-1, dp) + util(n-2, dp) + util(n-3, dp);
    }
public:
    int tribonacci(int n) {

        vector<int> dp(n+1, -1);
        return util(n, dp);
    }
};
/*
If N is the Nth tribonacci number then:
TC-> O(N)
SC-> DP Array: O(N) + Recursion Stack: O(N)ASC
*/

// Approach 2: Tabulation
class Solution {
public:
    int tribonacci(int n) {

        if(n<=1) return n;
        if(n==2) return 1;

        int *dp = new int[n+1];
        dp[0] = 0;
        dp[1] = dp[2] = 1;

        for(int i=3;i<=n;i++){
            dp[i] = dp[i-3] + dp[i-2] + dp[i-1];
        }
        return dp[n];
    }
};
/*
If N is the Nth tribonacci number then:
TC-> O(N)
SC-> DP Array: O(N)
*/


// Approach 3: Space Optimization
class Solution {
public:
    int tribonacci(int n) {

        if(n<=1) return n;
        if(n==2) return 1;

        int a=0, b=1, c=1;
        for(int i=3; i<=n; i++){
            c = a + b + c;
            b = c - b - a;
            a = c - b - a;
        }
        return c;
    }
};
/*
If N is the Nth tribonacci number then:
TC-> O(N)
SC-> O(1), constant
*/