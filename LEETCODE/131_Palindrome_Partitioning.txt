class Solution {
public:
    vector<vector<string>> partition(string s) {
        
        vector<vector<string>> result;
        vector<string> currentList;
        dfs(result, s, 0, currentList);
        return result;
    }
    
    void dfs(vector<vector<string>> &result, string &s, int start, vector<string> &currentList){
        if(start>=s.length()) result.push_back(currentList);
        
        for(int end=start; end<s.length(); end++){
            if(isPalidrome(s, start, end)){
                // add current substring in the currentList
                currentList.push_back(s.substr(start, end - start + 1));
                dfs(result, s, end+1, currentList);
                // backtrack and remove the current substring from currentList
                currentList.pop_back();
            }
        }
    }
    
    bool isPalidrome(string &s, int low, int high){
        while(low < high){
            if(s[low++] != s[high--]) return false;    
        }
        return true;
    }
};

/*
Time Complexity: O( (2^n) *k*(n/2) )

Reason: O(2^n) to generate every substring and O(n/2)  to check if the substring generated is a palindrome. O(k) is for inserting the palindromes in another data structure, where k  is the average length of the palindrome list.

Space Complexity: O(k * x)

Reason: The space complexity can vary depending upon the length of the answer. k is the average length of the list of palindromes and if we have x such list of palindromes in our final answer. The depth of the recursion tree is n, so the auxiliary space required is equal to the O(n).
*/