// Approach 1: Recursion + Memoization
class Solution {
private: 
    bool util(int i, int j, string &s, string &p, vector<vector<int>> &dp){
        if(i>=s.size() && j>=p.size()) return true;
        if(j>=p.size()) return false;

        if(dp[i][j]!=-1) return dp[i][j];

        bool match = i<s.size() && (s[i]==p[j] || p[j]=='.');
        if(j+1<p.size() && (p[j+1]=='*'))
        {
            // don't use *  or use *
            return dp[i][j] = (util(i, j+2, s, p, dp) || 
                                (match && util(i+1, j, s, p, dp))); 
        }
        if(match) return dp[i][j] = util(i+1, j+1, s, p, dp);            

        return dp[i][j] = false;
        
    }
public:
    bool isMatch(string s, string p) {
        int m = s.size(), n = p.size();
        vector<vector<int>> dp(m+1, vector<int>(n+1, -1));
        return util(0, 0, s, p, dp);
    }
};
/*
If M and N are the size of the string s and p respectively then:
1. Recursion:
    TC-> O(2^M * 2^N)
    SC-> Recursion Stack: O(M+N)ASC
2. Recursion + Memoization
    TC-> O(M*N)
    SC-> DP Array: O(M*N) + Recursion Stack: O(M+N)ASC
*/