// https://leetcode.com/problems/find-minimum-time-to-reach-last-room-i/description/?envType=daily-question&envId=2025-05-07


// Approach 1: Priority Queue
class Solution {
public:
    int minTimeToReach(vector<vector<int>>& moveTime) {
        int m = moveTime.size();
        int n = moveTime[0].size();
        
        // Store the minimum time to reach each room
        vector<vector<int>> time(m, vector<int>(n, INT_MAX));
        time[0][0] = 0;

        // Min-heap to always process the room with the least time so far
        priority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>, greater<>> pq;
        pq.push({0, 0, 0}); // {current time, row, col}

        // Only right and down directions
        int dir[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

        while (!pq.empty()) {
            auto [currTime, r, c] = pq.top();
            pq.pop();

            // Early exit: if we reached the last room
            if (r == m - 1 && c == n - 1)
                return currTime;

            for (auto& d : dir) {
                int nr = r + d[0], nc = c + d[1];
                if (nr < m && nr >= 0 && nc < n && nc >= 0) {
                    // Calculate the next valid time to enter the neighbor
                    int nextTime = currTime < moveTime[nr][nc] 
                                ? moveTime[nr][nc] + 1 
                                : currTime + 1;

                    // If this path is better, update and push to the queue
                    if (nextTime < time[nr][nc]) {
                        time[nr][nc] = nextTime;
                        pq.push({nextTime, nr, nc});
                    }
                }
            }
        }

        return -1; // Unreachable, but per problem constraints, this wonâ€™t happen
    }
};
/*
If M = number of rows, and N = number of columns, then:
TC-> O(M * N * log(M * N))
SC-> priority_queue(pq): O(3 * M * N)ASC
*/
