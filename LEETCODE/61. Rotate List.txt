// https://leetcode.com/problems/rotate-list/description/

// Approach 1: Iteration
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        // If there are no nodes or only one node, or k is 0, return head
        if (!head || !head->next || k == 0) return head;

        // Step 1: Count the total number of nodes and keep track of the last node
        int length = 1;
        ListNode* tail = head;
        while (tail->next) {
            tail = tail->next;
            length++;
        }

        // Step 2: Make the list circular
        tail->next = head;

        // Step 3: Find the new tail (position: length - (k % length))
        int newTailPos = length - (k % length);
        ListNode* newTail = head;
        for (int i = 1; i < newTailPos; i++) {
            newTail = newTail->next;
        }

        // Step 4: New head is the next node, break the cycle
        ListNode* newHead = newTail->next;
        newTail->next = nullptr;

        return newHead;
    }
};
/*
TC-> O(N)
SC-> O(1)
*/