// https://leetcode.com/problems/coin-change-ii/description/


// Approach 1: Recursion (Bottom-Up)(TLE) + Memoization
class Solution {
private:
    int util(int ind, int amount, vector<int> &coins, vector<vector<int>> &dp){
        // Base case
        if(ind == coins.size()) return amount == 0;

        if(dp[ind][amount] != -1) return dp[ind][amount];

        // Perform all operations
        int pick = 0, notPick = 0;
        if(coins[ind] <= amount) pick = util(ind, amount-coins[ind], coins, dp);
        notPick = util(ind+1, amount, coins, dp);

        // Return
        return dp[ind][amount] = pick + notPick;
    }
public:
    int change(int amount, vector<int>& coins) {
        
        int n = coins.size();
        vector<vector<int>> dp(n, vector<int>(amount+1, -1));

        return util(0, amount, coins, dp);
    }
};
/*
If N = size of array, and A = Amount, then:
Recursion:
    TC-> O(exponential), because any number of coins can be taken
    SC-> Recursion Stack: O(N)ASC

With Memoization:
    TC-> O(N * A)
    SC-> DP Array: O(N * A) + Recursion Stack: O(N)ASC
*/


// Approach 2: Tabulation (Top-Down)
class Solution {
public:
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        vector<vector<int>> dp(n+1, vector<int>(amount+1, -1));

        for(int ind=n; ind>=0; ind--){
            for(int A=0; A<=amount; A++){

                // Base case
                if(ind == n){
                    dp[ind][A] = (A == 0);
                    continue;
                }

                // Perform all operations
                int pick = 0, notPick = 0;
                if(coins[ind] <= A) pick = dp[ind][A-coins[ind]];
                notPick = dp[ind+1][A];
    
                // Return
                dp[ind][A] = pick + notPick;                        
            }
        }
        return dp[0][amount];
    }
};
/*
If N = size of array, and A = Amount, then:
TC-> O(N * A)
SC-> DP Array: O(N * A)
*/