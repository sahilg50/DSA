// Approach 1 (TLE)
class Solution {
private:
    void recurPermute(int n, string &ds, vector<bool> &m, vector<string> &permutes){
        if(ds.size() == n){
            permutes.push_back(ds);
            return;
        }
        
        for(int i=1; i<=n; i++){
            if(!m[i]){
                ds.push_back(char('0'+i));
                m[i] = true;
                recurPermute(n, ds, m, permutes);
                //BackTrack
                m[i] = false;
                ds.pop_back();
            }
        }
    }
public:
    string getPermutation(int n, int k) {
        vector<string> permutes;
        string ds; // ds for all the permutations
        vector<bool> m(n+1, false); // map elements uptill n+1;
        recurPermute(n, ds, m, permutes);
        
        return permutes[k-1];
    }
};
/*
TC-> O(n!)
SC-> permutes:O(n!) + ds:O(n) + RecursionStack:O(n)ASC
*/