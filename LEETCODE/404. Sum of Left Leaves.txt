// https://leetcode.com/problems/sum-of-left-leaves/description/?envType=daily-question&envId=2024-04-14


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// Approach 1: Optimal (Queue)
class Solution {
private:
    bool isLeaf(TreeNode *node){
        if(node->left == nullptr && node->right==nullptr) return true;
        return false;
    }
public:
    int sumOfLeftLeaves(TreeNode *root) {
        
        int totalSum = 0;

        queue<pair<TreeNode *, bool>> Q;
        Q.push({root, false});

        while(!Q.empty()){
            auto it = Q.front();
            Q.pop();

            TreeNode *node = it.first;
            if(it.second && isLeaf(node)) totalSum += node->val;

            if(node->left) Q.push({node->left, true});
            if(node->right) Q.push({node->right, false});
        }

        return totalSum;
    }
};
/*
If N = number of nodes in binary tree, then:
TC-> O(N)
SC-> Queue: O(N)
*/