// https://leetcode.com/problems/count-the-number-of-good-subarrays/description/?envType=daily-question&envId=2025-04-16


// Approach 1: Sliding Window
class Solution {
public:
    long long countGood(vector<int>& nums, int k) {
        
        unordered_map<int, int> freq;

        long long count = 0;

        long long pairs = 0;
        int n = nums.size();
        int i = 0;
        int j = 0;
        while(j < n){
            pairs += freq[nums[j]];
            freq[nums[j]]++;

            while(pairs >= k){
                count += (n - j);
                freq[nums[i]]--;
                pairs -= freq[nums[i]];
                i++;
            }

            j++;
        }

        return count;
    }
};
/*
If N = size of array, then:
TC-> O(N)
SC-> unordered_map (freq): O(N)
*/