// https://leetcode.com/problems/path-sum-ii/description/

// Approach 1: DFS
class Solution {
private:
    void dfs(TreeNode* root, int currSum, int targetSum, vector<int>& currPath, vector<vector<int>>& allPaths) {
        if (!root) return;

        currSum += root->val;
        currPath.push_back(root->val);

        // If it's a leaf and sum matches, add the path
        if (!root->left && !root->right && currSum == targetSum) {
            allPaths.push_back(currPath);
        }

        // Recurse on children
        if(root->left) dfs(root->left, currSum, targetSum, currPath, allPaths);
        if(root->right) dfs(root->right, currSum, targetSum, currPath, allPaths);

        // Backtrack
        currPath.pop_back();
    }

public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<int> currPath;
        vector<vector<int>> allPaths;

        dfs(root, 0, targetSum, currPath, allPaths);
        return allPaths;
    }
};
/*
TC-> O(N)
SC-> Recursion Stack: O(N)ASC
*/