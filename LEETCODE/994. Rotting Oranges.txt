// https://leetcode.com/problems/rotting-oranges/description/


// Approach 1: BFS using Queue
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));

        queue<pair<pair<int, int>, int>> Q;
        int cntFresh = 0;
        for(int r=0; r<m; r++){
            for(int c=0; c<n; c++){
                if(grid[r][c]==2){
                    Q.push({{r, c}, 0});
                    vis[r][c] = 1;
                }
                else if(grid[r][c]==1) cntFresh += 1;
            }
        }

        int time = 0;
        while(!Q.empty()){
            int r = Q.front().first.first;
            int c = Q.front().first.second;
            time = Q.front().second;
            Q.pop();

            int deltaR[] = {-1, 0, +1, 0};
            int deltaC[] = {0, -1, 0, +1};
            for(int i=0; i<4; i++){
                int row = deltaR[i] + r;
                int col = deltaC[i] + c;
                if(row>=0 && row<m && col>=0 && col<n && grid[row][col]==1 && !vis[row][col]){
                    Q.push({{row, col}, time+1});
                    vis[row][col] = 1;
                    cntFresh -= 1;
                }
            }
        }

        if(cntFresh != 0) return -1;
        return time;
    }
};
/*
if M = rows, N = cols, then:
TC -> Find rotten oranges: O(M*N) + Find time to rot: O(M*N*4)
SC -> Vis Array: O(M*N) + Queue: O(M*N)
*/

