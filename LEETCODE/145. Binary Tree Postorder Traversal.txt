// https://leetcode.com/problems/binary-tree-postorder-traversal/description/


// Approach 1: Recursion
class Solution {
private:
    vector<int> ans;
    void util(TreeNode *node){
        if(node == nullptr) return;

        util(node->left);
        util(node->right);
        ans.push_back(node->val);
    }
public:
    vector<int> postorderTraversal(TreeNode *root) {
        util(root);
        return ans;
    }
};
/*
If N = number of nodes, then:
TC-> O(N)
SC-> Recursion Stack: O(N) ASC + Ans: O(N) ASC
*/


// Approach 2: Iterative (Using 2 Stacks)
class Solution {
public:
    vector<int> postorderTraversal(TreeNode *root) {

        vector<int> ans;

        stack<TreeNode *> S1, S2;
        if(root!=nullptr) S1.push(root);

        while(!S1.empty()){
            TreeNode *node = S1.top(); S1.pop();
            S2.push(node);
            if(node->left != nullptr) S1.push(node->left);
            if(node->right != nullptr) S1.push(node->right);
        }

        while(!S2.empty()){
            ans.push_back(S2.top()->val); S2.pop();
        }

        return ans;
    }
};
/*
If N = number of nodes, then:
TC-> O(N)
SC-> Stack: O(2*N) + Ans: O(N) ASC
*/


// Approach 3: Iterative (Using 1 Stack)
class Solution {
public:
    vector<int> postorderTraversal(TreeNode *root) {
        vector<int> ans;
        TreeNode *node = root;

        stack<TreeNode *> S;
        while(node != nullptr || !S.empty()){
            if(node != nullptr){
                S.push(node);
                node = node->left;
            }
            else{
                TreeNode *temp = S.top()->right;
                if(temp == nullptr){
                    temp = S.top(); S.pop();
                    ans.push_back(temp->val);
                    while(!S.empty() && temp == S.top()->right){
                        temp = S.top(); S.pop();
                        ans.push_back(temp->val);
                    }
                }
                else node = temp;
            }
        }
        return ans;
    }
};
/*
If N = number of nodes, then:
TC-> O(N)
SC-> Stack: O(N) + Ans: O(N) ASC
*/