// https://takeuforward.org/data-structure/minimum-insertions-to-make-string-palindrome-dp-29/

int lcs(string &s, string &t){
    int m = s.size();
    int n = t.size();
    vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
    for(int i=1; i<=m; i++){
        for(int j=1; j<=n; j++){
            if(s[i-1]==t[j-1]) dp[i][j] = 1 + dp[i-1][j-1];
            else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
        }
    }
    return dp[m][n];
}

int longestPalindromicSubsequence(string &s){
    string t = s;
    reverse(t.begin(), t.end());
    return lcs(s,t);
}

int minInsertion(string &str)
{
    return str.size() - longestPalindromicSubsequence(str);
}
/*
TC-> O(N*N)
SC-> O(N*N), but code can be optimized for space complexity.
*/