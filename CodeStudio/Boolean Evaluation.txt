// https://www.codingninjas.com/codestudio/problems/problem-name-boolean-evaluation_1214650?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0


// Approach 1: Recursion(TLE)(Top-Down) + Memoization
#include <bits/stdc++.h> 
int mod = 1000000007;

long long util(int i, int j, int isTrue, string &exp, vector<vector<vector<long long>>> &dp){
    if(i>j) return 0;
    if(i==j){
        if(isTrue) return exp[i]=='T';
        else return exp[i]=='F';
    }
    if(dp[i][j][isTrue]!=-1) return dp[i][j][isTrue];

    long long ways = 0;
    for(int k=i+1; k<=j-1; k+=2){
        long long LT = util(i, k-1, 1, exp, dp) % mod;
        long long LF = util(i, k-1, 0, exp, dp) % mod;
        long long RT = util(k+1, j, 1, exp, dp) % mod;
        long long RF = util(k+1, j, 0, exp, dp) % mod;

        if(exp[k]=='&'){
            if(isTrue) ways += (LT*RT) % mod;
            else ways += ((LT*RF)%mod + (RT*LF)%mod + (LF*RF)%mod) % mod;
        }
        else if(exp[k]=='|'){
            if(isTrue) ways += ((LT*RF)%mod + (RT*LF)%mod + (LT*RT)%mod) % mod;
            else ways += (LF*RF) % mod;
        }
        else{
            if(isTrue) ways += ((LT*RF)%mod + (RT*LF)%mod) % mod;
            else ways += ((LF*RF)%mod + (LT*RT)%mod) % mod;
        }
    }
    return dp[i][j][isTrue] = ways;
}

int evaluateExp(string & exp) {
    int n = exp.size();
    vector<vector<vector<long long>>> dp(n, vector<vector<long long>>(n, vector<long long>(2, -1)));
    return util(0, n-1, 1, exp, dp)%mod;
}
/*
If N is the size of the exp then:
Recursion:
    TC-> Exponential ~= 
    SC-> Recursion Stack: O(N)ASC

With Memoization:
    TC-> States: O(N*N*2) * For Loop Partition: O(N) ~= O(N^3)
    SC-> DP Array: O(N*N*2) + Recursion Stack: O(N)ASC
*/













