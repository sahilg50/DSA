// https://practice.geeksforgeeks.org/problems/next-larger-element-1587115620/1?utm_source=geeksforgeeks&utm_medium=article_practice_tab&utm_campaign=article_practice_tab

// Approach 1: Using Stack (Left to Right Traversal)
// Solution Reference: https://www.youtube.com/watch?v=Du881K7Jtk8&t=786s
class Solution
{
public:
    vector<long long> nextLargerElement(vector<long long> arr, int n){
        stack<long long> S;
        vector<long long> NGE(n, -1);
        
        int i=0; 
        while(i<n){
            if(!S.empty()  && arr[S.top()]<arr[i]){
                NGE[S.top()] = arr[i];
                S.pop();
            }
            else{
                S.push(i++);
            }
        }
        
        return NGE;
    }
};
/*
TC-> O(2*N), because at any time you'll push and pop each element
SC-> Stack: O(N) + NGE: O(N)ASC
*/


// Approach 2: Using Stack (Right to Left Approach)
// Solution Reference: https://www.youtube.com/watch?v=sDKpIO2HGq0
class Solution
{
public:
    vector<long long> nextLargerElement(vector<long long> arr, int n){
        stack<long long> S;
        vector<long long> NGE(n, -1);
        
        int i=n-1; 
        while(i>=0){
            if(!S.empty()  && S.top()>arr[i]){
                NGE[i] = S.top();
                S.push(arr[i]);
                i--;
            }
            else if(S.empty()){
                S.push(arr[i]);
                i--;
            }
            else{
                S.pop();
            }
        }
        
        return NGE;
    }
};
/*
TC-> O(2*N), because at any time you'll push and pop each element
SC-> Stack: O(N) + NGE: O(N)ASC
*/