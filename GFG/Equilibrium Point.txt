// https://www.geeksforgeeks.org/problems/equilibrium-point-1587115620/1?page=1&company=Amazon&sortBy=submissions


// Approach 1: Better Approach (2 - Arrays)
class Solution {
public:
    int equilibriumPoint(vector<long long> &arr) {
        
        int n = arr.size();
        vector<long long> leftSum(n, 0), rightSum(n, 0);
        
        
        // Creating vector for storing sum of elements to the left of index 'i'
        long long sum = 0;
        for(int i=0; i<n; i++){
            leftSum[i] = sum;
            sum += arr[i];
        }
        
        // Creating vector for storing sum of elements to the right of index 'i'
        sum = 0;
        for(int i=n-1; i>=0; i--){
            rightSum[i] = sum;
            sum += arr[i];
        }
        
        for(int i=0; i<n; i++){
            if(leftSum[i] == rightSum[i]) return i+1;
        }
        
        return -1;
    }
};
/*
If N = size of the array, then:
TC-> O(3 * N)
SC-> leftSum (Vector): O(N) + rightSum (Vector): O(N)
*/


// Approach 2: Optimal (2-Pointers)
class Solution {
public:
    int equilibriumPoint(vector<long long> &arr) {
        
        int n = arr.size();
        if(n == 1) return 1;
        else if(n == 2){
            if(arr[0] == 0) return 2;
            if(arr[1] == 0) return 1;
        }
        
        int L = 0, R = n - 1;
        long long LSum = 0, RSum = 0;
        
        while(L < R){
            if(LSum < RSum) LSum += arr[L++];
            
            else if(RSum < LSum) RSum += arr[R--];
            
            else{
                LSum += arr[L++];
                RSum += arr[R--];
            }
            
            if(L == R && LSum == RSum) return L+1;
        }
        
        return -1;
    }
};
/*
If N = size of the array, then:
TC-> O(N)
SC-> O(1)
*/