// https://www.geeksforgeeks.org/problems/merge-sort/1?utm_source=geeksforgeeks&utm_medium=article_practice_tab&utm_campaign=article_practice_tab


// https://www.youtube.com/watch?v=ogjf7ORKfd8
// Approach 1: Recursion
class Solution
{
private:
    void merge(int arr[], int l, int m, int r)
    {
        vector<int> temp;
        int i=l, j=m+1;
        
        while(i<=m && j<=r){
            if(arr[i] <= arr[j]){
                temp.push_back(arr[i]);
                i++;
            }
            else{
                temp.push_back(arr[j]);
                j++;
            }
        }
        
        while(i<=m){
            temp.push_back(arr[i]);
            i++;
        }
        
        while(j<=r){
            temp.push_back(arr[j]);
            j++;
        }
        
        for(int ind=l; ind<=r; ind++) arr[ind] = temp[ind-l];
    }
    
public:
    void mergeSort(int arr[], int l, int r)
    {
        // Base case
        if(l >= r) return;
        
        // Split the array
        int m = (l+r)/2;
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        
        // Sort the array
        merge(arr, l, m, r);
    }
};
/*
If N = size of array, then:
TC-> O(N * LogN), https://www.youtube.com/watch?v=g1AwUYauqgg
SC-> Temp Array: O(N) + Recursion Stack: O(LogN)ASC
*/