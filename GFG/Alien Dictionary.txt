// https://practice.geeksforgeeks.org/problems/alien-dictionary/1


// Approach 1: Topological Sort (Kahn's Algo) (BFS + Queue)
class Solution{
    public:
    string findOrder(string dict[], int N, int K) {
        vector<int> adj[K];
        
        for(int i=0; i<N-1; i++){
            string s1 = dict[i];
            string s2 = dict[i+1];
            int len = min(s1.size(), s2.size());
            for(int ptr=0; ptr<len; ptr++){
                if(s1[ptr] != s2[ptr]){
                    adj[s1[ptr]-'a'].push_back(s2[ptr]-'a');
                    break;
                }
            }
        }
        
        vector<int> inDegree(K, 0);
        for(int node=0; node<K; node++){
            for(auto neighbor : adj[node]){
                inDegree[neighbor]++;
            }
        }
        
        queue<int> Q;
        for(int node=0; node<K; node++){
            if(inDegree[node]==0) Q.push(node);
        }
        
        vector<char> topoSort;
        while(!Q.empty()){
            int node = Q.front();
            Q.pop();
            
            topoSort.push_back(node + 'a');
            for(neighbor : adj[node]){
                inDegree[neighbor]--;
                if(inDegree[neighbor]==0) Q.push(neighbor);
            }
        }
        
        string ans = "";
        for(auto ch : topoSort) ans.push_back(ch);
        
        return ans;
    }
};
/*
TC-> Create Adj List: O(N*K) + Make InDegree: O(V + E) + Start Queue: O(V) + Process Queue: O(V + E)
SC-> Adj List: O(V*V) + InDegree: O(V) + Queue: O(V) + Topo: O(V) + Ans: O(V) ASC
*/