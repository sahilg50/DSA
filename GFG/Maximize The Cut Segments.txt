// https://www.geeksforgeeks.org/problems/cutted-segments1642/1


// Approach 1: Recursion (TLE)
class Solution
{
private:
    int cut(int n, int x, int y, int z){
        // Base case
        if(n == 0) return 0;
        if(n < 0) return INT_MIN;
        
        // Perform all operations
        int a = cut(n-x, x, y, z);
        int b = cut(n-y, x, y, z);
        int c = cut(n-z, x, y, z);
        
        // Return 
        return 1 + max(a, max(b, c));
    }
    
public:
    //Function to find the maximum number of cuts.
    int maximizeTheCuts(int n, int x, int y, int z)
    {
        
        int ans = cut(n, x, y, z);
        
        if(ans<0) return 0;
        return ans;
    }
};
/*
If N = length of the line segment, let X be the length of the smallest cut, then:
Minimum cuts will be K = N/X. Note that K is the depth of recursive tree.
TC-> O(K^3)
SC-> Recursion Stack: O(K)ASC
*/


// Approach 2: Recursion + Memoization
class Solution
{
private:
    int cut(int n, int x, int y, int z, vector<int> &dp){
        // Base case
        if(n == 0) return 0;
        if(n < 0) return INT_MIN;
        
        if(dp[n] != -1) return dp[n];
        
        // Perform all operations
        int a = cut(n-x, x, y, z, dp);
        int b = cut(n-y, x, y, z, dp);
        int c = cut(n-z, x, y, z, dp);
        
        // Return 
        return dp[n] = 1 + max(a, max(b, c));
    }
    
public:
    //Function to find the maximum number of cuts.
    int maximizeTheCuts(int n, int x, int y, int z)
    {
        vector<int> dp(n+1, -1);
        int ans = cut(n, x, y, z, dp);
        
        if(ans<0) return 0;
        return ans;
    }
};
/*
If N = length of the line segment, then:
TC-> O(N*3)
SC-> DP Array: O(N+1) + Recursion Stack: O(K)ASC
*/


// Approach 3: Tabulation
class Solution
{
public:
    //Function to find the maximum number of cuts.
    int maximizeTheCuts(int n, int x, int y, int z)
    {
        vector<int> dp(n+1, INT_MIN);
        dp[0] = 0;
        
        for(int i=1; i<=n; i++){
            if(i-x >= 0) dp[i] = max(dp[i], dp[i-x] + 1);
            if(i-y >= 0) dp[i] = max(dp[i], dp[i-y] + 1);
            if(i-z >= 0) dp[i] = max(dp[i], dp[i-z] + 1);
        }
        
        if(dp[n] < 0) return 0;
        return dp[n];
    }
};
/*
If N = length of the line segment, then:
TC-> O(N*3)
SC-> DP Array: O(N+1)
*/
