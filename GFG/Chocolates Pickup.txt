// https://www.geeksforgeeks.org/problems/chocolates-pickup/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=chocolates-pickup


// Approach 1: Recursion + Memoization (Bottom-Up)
class Solution {
int util(int i, int j1, int j2, vector<vector<int>> &grid, int m, int n, vector<vector<vector<int>>> &dp){
    // Base case
    if(j1<0 || j1>=n || j2<0 || j2>=n) return -1e9;
    if(i==m-1){
        if(j1==j2) return grid[i][j1];
        else return grid[i][j1] + grid[i][j2];
    }
    if(dp[i][j1][j2] != -1) return dp[i][j1][j2];
    
    // Perform all operations
    int maxChoco = INT_MIN;
    for(int d1=-1; d1<=1; d1++){
        for(int d2=-1; d2<=1; d2++){
            int currChoco = 0;
            if(j1 == j2) currChoco = grid[i][j1] + util(i+1, j1+d1, j2+d2, grid, m, n, dp);
            else currChoco = grid[i][j1] + grid[i][j2] + util(i+1, j1+d1, j2+d2, grid, m, n, dp);
            maxChoco = max(maxChoco, currChoco);
        }
    }
    
    // Return
    return  dp[i][j1][j2] =maxChoco;
}
public:
    int solve(int m, int n, vector<vector<int>>& grid) {
        
        vector<vector<vector<int>>> dp(m, vector<vector<int>>(n, vector<int>(n, -1)));
        return util(0, 0, n-1, grid, m, n, dp);
    }
};
/*
If M = number of rows, n = number of columns, then:
TC-> O(9 * M*N*N)
SC-> DP Array (3d vector): O(M*N*N) + Recursion Stack: O(M+N+N)ASC
*/