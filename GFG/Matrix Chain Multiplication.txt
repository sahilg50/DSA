// https://practice.geeksforgeeks.org/problems/matrix-chain-multiplication0303/1?utm_source=geeksforgeeks&utm_medium=article_practice_tab&utm_campaign=article_practice_tab


// Approach 1: Recursion(TLE)(Top-Down) + Memoization
class Solution{
private:
    int util(int i, int j, int arr[], vector<vector<int>> &dp){
        if(i==j) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        
        int ans = INT_MAX;
        for(int k=i; k<j; k++){
            int temp = util(i, k, arr, dp) + util(k+1, j, arr, dp) + arr[i-1]*arr[k]*arr[j]; 
            ans = min(ans, temp);
        }
        return dp[i][j] = ans;
    }
public:
    int matrixMultiplication(int N, int arr[])
    {
        vector<vector<int>> dp(N, vector<int>(N, -1));
        return util(1, N-1, arr, dp); 
    }
};
/*
If N is the size of the array then: 
Recursion:
    TC-> Exponential
    SC-> Recursion Stack: O(N)

With Memoization:
    TC-> O(N^3)
    SC-> Dp Array: O(N^2) + Recursion Stack: O(N)
*/


// Approach 2: Tabulation (Bottom-Up)
class Solution{
public:
    int matrixMultiplication(int N, int arr[])
    {
        vector<vector<int>> dp(N+1, vector<int>(N+1, 0)); 
        
        for(int L=2; L<N; L++){
            for(int i=1; i<=N-L; i++){
                int j = i+L-1;
                dp[i][j] = INT_MAX;
                for(int k=i; k<=j; k++){
                    int ans = dp[i][k] + dp[k+1][j] + (arr[i-1]*arr[k]*arr[j]);
                    dp[i][j] = min(dp[i][j], ans);
                }
            }
        }
        return dp[1][N-1]; 
    }
};
/*
If N is the size of the array then: 
TC-> O(N^3)
SC-> Dp Array: O(N^2)
*/
