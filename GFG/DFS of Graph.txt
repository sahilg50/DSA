// https://practice.geeksforgeeks.org/problems/depth-first-traversal-for-a-graph/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=dfs_of_graph


// Approach 1: DFS using Recursion
class Solution {
private:    
    void dfs(int node, int vis[], vector<vector<int>> &adj, vector<int> &ans){
        vis[node] = 1;
        ans.push_back(node);
        
        for(it : adj[node]){
            if(!vis[it]){
                dfs(it, vis, adj, ans);
            }
        }
    }
public:
    // Function to return a list containing the DFS traversal of the graph.
    vector<int> dfsOfGraph(vector<vector<int>>& adj) {
        
        int n = adj.size();
        int vis[n] = {0};
        vector<int> ans;
        
        dfs(0, vis, adj, ans);
        return ls;
    }
};
/*
If V = number of vertices and E = number of edges then: 
TC-> O(V) + O(2*E)
SC-> Vis: O(V) + Recursion Stack: O(V)ASC + ans: O(V)ASC
*/


// Approach 2: DFS using Stack
class Solution {
public:
    // Function to return a list containing the DFS traversal of the graph.
    vector<int> dfsOfGraph(vector<vector<int>>& adj) {
        
        int n = adj.size();
        int vis[n] = {0};
        stack<int> S;
        
        S.push(0);
        
        vector<int> ans;
        
        while(!S.empty()){
            int node = S.top(); S.pop();
            
            if(!vis[node]){
                vis[node] = 1;
                ans.push_back(node);
            }
            
            for(auto it=adj[node].rbegin(); it!=adj[node].rend(); it++){
                if(!vis[*it]){
                    S.push(*it);
                }
            }
        }
        return ans;
    }
};