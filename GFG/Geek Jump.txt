// https://www.geeksforgeeks.org/problems/geek-jump/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=geek-jump


// Approach 1: Recursion
class Solution {
private:
    int util(int ind, vector<int> &height, int n){
        // Base case
        if(ind==n-1) return 0;
        
        // Perform all operations
        int jump1 = INT_MAX, jump2 = INT_MAX;
        if(ind+1 < n) jump1 = abs(height[ind] - height[ind+1]) + util(ind+1, height, n);
        if(ind+2 < n) jump2 = abs(height[ind] - height[ind+2]) + util(ind+2, height, n);
        
        // Return 
        return min(jump1, jump2);
    }
public:
    int minimumEnergy(vector<int>& height, int n) {
        return util(0, height, n);
    }
};
/*
If N = size of array, then:
TC-> O(2^N) TLE
SC-> Recursion stack: O(N)ASC
*/


// Approach 2: Recursion + Memoization
class Solution {
private:
    int util(int ind, vector<int> &height, int n, vector<int> &dp){
        // Base case
        if(ind==n-1) return 0;
        if(dp[ind] != -1) return dp[ind];
        
        // Perform all operations
        int jump1 = INT_MAX, jump2 = INT_MAX;
        if(ind+1 < n) jump1 = abs(height[ind] - height[ind+1]) + util(ind+1, height, n, dp);
        if(ind+2 < n) jump2 = abs(height[ind] - height[ind+2]) + util(ind+2, height, n, dp);
        
        // Return 
        return dp[ind] = min(jump1, jump2);
    }
public:
    int minimumEnergy(vector<int>& height, int n) {
        vector<int> dp(n, -1);
        return util(0, height, n, dp);
    }
};
/*
If N = size of array, then:
TC-> O(N * 2)
SC-> Dp Array: O(N) + Recursion stack: O(N)ASC
*/


// Approach 3: Tabulation
class Solution {
public:
    int minimumEnergy(vector<int>& height, int n) {
        
        vector<int> dp(n, -1);
        dp[n-1] = 0;
        
        for(int ind=n-2; ind>=0; ind--){
            
            int jump1 = INT_MAX, jump2 = INT_MAX;
            
            if(ind+1 < n) jump1 = abs(height[ind] - height[ind+1]) + dp[ind+1];
            if(ind+2 < n) jump2 = abs(height[ind] - height[ind+2]) + dp[ind+2];
            
            dp[ind] = min(jump1, jump2);
        }
        
        return dp[0];
    }
};
/*
If N = size of array, then:
TC-> O(N)
SC-> Dp Array: O(N)
*/


// Approach 4: Space Optimization
class Solution {
public:
    int minimumEnergy(vector<int>& height, int n) {
        
        int prev1 = 0, prev2 = 0;
        
        for(int ind=n-2; ind>=0; ind--){
            
            int jump1 = INT_MAX, jump2 = INT_MAX;
            
            if(ind+1 < n) jump1 = abs(height[ind] - height[ind+1]) + prev1;
            if(ind+2 < n) jump2 = abs(height[ind] - height[ind+2]) + prev2;
            
            int curr = min(jump1, jump2);
            prev2 = prev1;
            prev1 = curr;
        }
        
        return prev1;
    }
};
/*
If N = size of array, then:
TC-> O(N)
SC-> O(1)
*/