// https://practice.geeksforgeeks.org/problems/knapsack-with-duplicate-items4201/1


// Approach 1: Recursion (Bottom-Up) + Memoization
class Solution{
private:
    int util(int ind, int N, int W, int val[], int wt[], vector<vector<int>> &dp){
        
        // Base case
        if(ind >= N) return 0;
        
        if(dp[ind][W] != -1) return dp[ind][W];
        
        // Perform all operations
        int pick = 0, notPick = 0;
        if(wt[ind]<=W) pick = val[ind] + util(ind, N, W-wt[ind], val, wt, dp);
        notPick = util(ind+1, N, W, val, wt, dp);
        
        // Return
        return dp[ind][W] = max(pick, notPick);
    }
public:
    int knapSack(int N, int W, int val[], int wt[])
    {
        vector<vector<int>> dp(N+1, vector<int>(W+1, -1));
        return util(0, N, W, val, wt, dp);
    }
};
/*
If N = Size of array, and W = Weight limit, then:
Recursion:
    TC-> O(exponential), because each item can be taken any number of times
    SC-> Recursion Stack: O(N)ASC

With Memoization:
    TC-> O(N*W)
    SC-> DP Array (2d-vector): O(N*W) + Recursion Stack: O(N)ASC
*/


// Approach 2: Tabulation (Top-Down)
class Solution{
public:
    int knapSack(int N, int W, int val[], int wt[])
    {
        vector<vector<int>> dp(N+1, vector<int>(W+1, -1));
        
        for(int ind=N; ind>=0; ind--){
            for(int w=0; w<=W; w++){
                
                // Base case
                if(ind >= N){
                    dp[ind][w] = 0;
                    continue;
                }
                
                // Perform all operations
                int pick = 0, notPick = 0;
                if(wt[ind]<=w) pick = val[ind] + dp[ind][w-wt[ind]];
                notPick = dp[ind+1][w];
                
                // Return
                dp[ind][w] = max(pick, notPick);
            }
        }
        
        return dp[0][W];
    }
};
/*
If N = Size of array, and W = Weight limit, then:
TC-> O(N*W)
SC-> DP Array: O(N*W)
*/