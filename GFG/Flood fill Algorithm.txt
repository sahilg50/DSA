// https://practice.geeksforgeeks.org/problems/flood-fill-algorithm1856/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=flood-fill-algorithm


// Approach 1: Using DFS
class Solution {
private:
    void dfs(int i, int j, vector<vector<int>> &image, vector<vector<int>> &vis, int m, int n, int newColor, int iniColor){
        if(i>=m || i<0 || j>=n || j<0) return;
        if(image[i][j]!=iniColor) return;
        if(vis[i][j]) return;
        
        vis[i][j] = 1;
        image[i][j] = newColor;
        
        dfs(i+1, j, image, vis, m, n, newColor, iniColor);
        dfs(i-1, j, image, vis, m, n, newColor, iniColor);
        dfs(i, j+1, image, vis, m, n, newColor, iniColor);
        dfs(i, j-1, image, vis, m, n, newColor, iniColor);
    }
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int m = image.size(), n = image[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));
        int iniColor = image[sr][sc];
        dfs(sr, sc, image, vis, m, n, newColor, iniColor);
        return image;
    }
};
/*
If M = rows and N = columns then:
TC-> O(M*N*4)
SC-> Vis Array: O(M*N) + Recursion Stack: O(M+N)ASC
*/