// https://www.geeksforgeeks.org/problems/minimum-spanning-tree/1


// Approach 1: Optimal (Prims Algorithm) (The approach is greedy)
class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        
        vector<bool> vis(V, false);
        
        pq.push({0, 0}); // {wt, node}
        int sum = 0;
        
        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();
            int node = it.second;
            int wt = it.first;
            
            if(vis[node]) continue;
            
            vis[node] = true;
            sum += wt;
            
            for(auto it : adj[node]){
                int adjNode = it[0];
                int edgeWt = it[1];
                if(!vis[adjNode]) pq.push({edgeWt, adjNode});
            }
        }
        
        return sum;
    }
};
/*
If V is vertices, and E is edges, then:
TC-> O(V*LogV + E*LogV) 
SC-> Visited Array: O(V) + Priority Queue: O(E)
*/