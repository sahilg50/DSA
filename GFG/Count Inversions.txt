// https://www.geeksforgeeks.org/problems/inversion-of-array-1587115620/1


// Approach 1: Brute Force
class Solution{
public:
    long long int inversionCount(long long arr[], long long N)
    {
        long long count = 0;
        for(long long i=0; i<N; i++){
            for(long long j=i+1; j<N; j++){
                if(arr[i] > arr[j]) count += 1;
            }
        }
        return count;
    }
};
/*
If N = size of Array, then:
TC-> O(N^2) TLE
SC-> O(1)
*/


// Approach 2: Optimal (Merge Sort)
class Solution{
private:
    long long int count = 0;
    void merge(long long arr[], long long l, long long m, long long r){
        
        vector<long long> temp;
        int i=l, j=m+1;
        
        while(i<=m && j<=r){
            if(arr[i] <= arr[j]){
                temp.push_back(arr[i]);
                i++;
            }
            else{
                temp.push_back(arr[j]);
                j++;
                count += (m - i + 1);
            }
        }
        
        while(i<=m){
            temp.push_back(arr[i]);
            i++;
        }
        
        while(j<=r){
            temp.push_back(arr[j]);
            j++;
        }
        
        for(int ind=l; ind<=r; ind++){
            arr[ind] = temp[ind-l];
        }
    }
    
    void mergeSort(long long arr[], long long l, long long r){
        
        if(l>=r) return;
        
        long long m = (l+r)/2;
        
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        
        merge(arr, l, m, r);
    }
public:
    long long int inversionCount(long long arr[], long long N)
    {
        mergeSort(arr, 0, N-1);
        return count;
    }
};
/*
If N = size of Array, then:
TC-> O(N * LogN), https://www.youtube.com/watch?v=g1AwUYauqgg
SC-> Temp Array: O(N) + Recursion Stack: O(LogN)ASC
*/