// https://practice.geeksforgeeks.org/problems/rotten-oranges2536/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=rotten_oranges


// Approach 1: DFS using Queue
class Solution 
{
public:
    int orangesRotting(vector<vector<int>>& grid) {
        
        int n = grid.size(), m = grid[0].size();
        queue<pair<pair<int, int>, int>> Q;
        vector<vector<int>> vis(n, vector<int>(m, 0));
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]==2){
                    Q.push({{i, j}, 0});
                    vis[i][j] = 1;
                }
            }
        }
        
        
        int minTime = 0;
        int dRow[] = {-1, 0, +1, 0};
        int dCol[] = {0, +1, 0, -1};
        while(!Q.empty()){
            int r = Q.front().first.first;
            int c = Q.front().first.second;
            int t = Q.front().second;
            minTime = max(t, minTime);
            Q.pop();
            for(int i=0; i<4; i++){
                int row = r + dRow[i];
                int col = c + dCol[i];
                if(row>=0 && row<n && col>=0 && col<m && !vis[row][col] && grid[row][col]==1){
                    Q.push({{row, col}, t+1});
                    vis[row][col] = 1;
                }
            }
        }
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]==1 && vis[i][j]==0) return -1;
            }
        }
        
        return minTime;
    }
};
/*
If N = rows and M = columns then:
TC-> O(N*M) + O(N*M*4) + O(N*M)
SC-> Vis Array: O(N*M) + Queue: O(N*M)
*/