// https://www.geeksforgeeks.org/problems/path-with-minimum-effort/1


// Approach 1: Optimal (Priority Queue)
class Solution {
public:
    int MinimumEffort(vector<vector<int>>& heights) {
        int m = heights.size();
        int n = heights[0].size();
        
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;
        vector<vector<int>> dist(m, vector<int>(n, 1e9));
        
        dist[0][0] = 0;
        pq.push({0, {0, 0}});
        
        int deltaR[] = {0, -1, 0, +1};
        int deltaC[] = {-1, 0, +1, 0};
        
        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();
            
            int diff = it.first;
            int r = it.second.first;
            int c = it.second.second;
            
            if(r==m-1 && c==n-1) return diff;
            
            for(int i=0; i<4; i++){
                int row = r + deltaR[i];
                int col = c + deltaC[i];
                
                if(row>=0 && row<m && col>=0 && col<n){
                    int newEffort = max(abs(heights[row][col] - heights[r][c]), diff);
                    
                    if(newEffort < dist[row][col]){
                        dist[row][col] = newEffort;
                        pq.push({newEffort, {row, col}});
                    } 
                }
            }
        }
        return 0;
    }
};
/*
If M = rows, and N = cols, then:
TC-> O(4*M*N)
SC-> Priority Queue: O(M*N)
*/