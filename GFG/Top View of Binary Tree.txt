// https://www.geeksforgeeks.org/problems/top-view-of-binary-tree/1

// Approach 1: Optimal (Level Order Traversal) (Queue + Map)
class Solution
{
    public:
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    vector<int> topView(Node *root)
    {
        map<int, int> M;    // <Node, vertical index>
        
        queue<pair<Node*, int>> Q;
        if(root) Q.push({root, 0});
        
        while(!Q.empty()){
            auto temp = Q.front(); 
            Q.pop();
            
            Node *node = temp.first;
            int line = temp.second;
            if(M.find(line) == M.end()) M[line] = node->data;
            
            if(node->left) Q.push({node->left, line-1});
            if(node->right) Q.push({node->right, line+1});
        }
        
        vector<int> ans;
        for(auto it : M) ans.push_back(it.second);
        
        return ans;
    }

};
/*
If N = number of nodes in BT, then:
TC-> Level Order Traversal: O(N) + Insert into map: O(logN!)
SC-> Queue: O(N) + Map: O(N) + Vector: O(N)ASC
*/